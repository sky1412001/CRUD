{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { ALERT_WARN_CANCEL_ESCAPE_KEY, ALERT_WARN_CANCEL_OUTSIDE_CLICK, ALERT_WARN_CANCEL_PROPS } from \"../../common/errors\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon } from \"../icon/icon\";\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nvar Alert = /** @class */function (_super) {\n  __extends(Alert, _super);\n  function Alert() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.handleCancel = function (evt) {\n      return _this.internalHandleCallbacks(false, evt);\n    };\n    _this.handleConfirm = function (evt) {\n      return _this.internalHandleCallbacks(true, evt);\n    };\n    return _this;\n  }\n  Alert.prototype.render = function () {\n    var _a = this.props,\n      canEscapeKeyCancel = _a.canEscapeKeyCancel,\n      canOutsideClickCancel = _a.canOutsideClickCancel,\n      children = _a.children,\n      className = _a.className,\n      icon = _a.icon,\n      intent = _a.intent,\n      loading = _a.loading,\n      cancelButtonText = _a.cancelButtonText,\n      confirmButtonText = _a.confirmButtonText,\n      onClose = _a.onClose,\n      overlayProps = __rest(_a, [\"canEscapeKeyCancel\", \"canOutsideClickCancel\", \"children\", \"className\", \"icon\", \"intent\", \"loading\", \"cancelButtonText\", \"confirmButtonText\", \"onClose\"]);\n    return React.createElement(Dialog, __assign({}, overlayProps, {\n      className: classNames(Classes.ALERT, className),\n      canEscapeKeyClose: canEscapeKeyCancel,\n      canOutsideClickClose: canOutsideClickCancel,\n      onClose: this.handleCancel,\n      portalContainer: this.props.portalContainer\n    }), React.createElement(\"div\", {\n      className: Classes.ALERT_BODY\n    }, React.createElement(Icon, {\n      icon: icon,\n      size: 40,\n      intent: intent\n    }), React.createElement(\"div\", {\n      className: Classes.ALERT_CONTENTS\n    }, children)), React.createElement(\"div\", {\n      className: Classes.ALERT_FOOTER\n    }, React.createElement(Button, {\n      loading: loading,\n      intent: intent,\n      text: confirmButtonText,\n      onClick: this.handleConfirm\n    }), cancelButtonText && React.createElement(Button, {\n      text: cancelButtonText,\n      disabled: loading,\n      onClick: this.handleCancel\n    })));\n  };\n  Alert.prototype.validateProps = function (props) {\n    if (props.onClose == null && props.cancelButtonText == null !== (props.onCancel == null)) {\n      console.warn(ALERT_WARN_CANCEL_PROPS);\n    }\n    var hasCancelHandler = props.onCancel != null || props.onClose != null;\n    if (props.canEscapeKeyCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n    }\n    if (props.canOutsideClickCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n    }\n  };\n  Alert.prototype.internalHandleCallbacks = function (confirmed, evt) {\n    var _a;\n    var _b = this.props,\n      onCancel = _b.onCancel,\n      onClose = _b.onClose,\n      onConfirm = _b.onConfirm;\n    (_a = confirmed ? onConfirm : onCancel) === null || _a === void 0 ? void 0 : _a(evt);\n    onClose === null || onClose === void 0 ? void 0 : onClose(confirmed, evt);\n  };\n  Alert.defaultProps = {\n    canEscapeKeyCancel: false,\n    canOutsideClickCancel: false,\n    confirmButtonText: \"OK\",\n    isOpen: false,\n    loading: false\n  };\n  Alert.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Alert\");\n  return Alert;\n}(AbstractPureComponent);\nexport { Alert };","map":{"version":3,"names":["classNames","React","AbstractPureComponent","Classes","DISPLAYNAME_PREFIX","ALERT_WARN_CANCEL_ESCAPE_KEY","ALERT_WARN_CANCEL_OUTSIDE_CLICK","ALERT_WARN_CANCEL_PROPS","Button","Dialog","Icon","Alert","_super","__extends","_this","apply","arguments","handleCancel","evt","internalHandleCallbacks","handleConfirm","prototype","render","_a","props","canEscapeKeyCancel","canOutsideClickCancel","children","className","icon","intent","loading","cancelButtonText","confirmButtonText","onClose","overlayProps","__rest","createElement","__assign","ALERT","canEscapeKeyClose","canOutsideClickClose","portalContainer","ALERT_BODY","size","ALERT_CONTENTS","ALERT_FOOTER","text","onClick","disabled","validateProps","onCancel","console","warn","hasCancelHandler","confirmed","_b","onConfirm","defaultProps","isOpen","displayName","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/alert/alert.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent, Classes, DISPLAYNAME_PREFIX, Intent, MaybeElement, Props } from \"../../common\";\nimport {\n    ALERT_WARN_CANCEL_ESCAPE_KEY,\n    ALERT_WARN_CANCEL_OUTSIDE_CLICK,\n    ALERT_WARN_CANCEL_PROPS,\n} from \"../../common/errors\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { OverlayLifecycleProps } from \"../overlay/overlay\";\n\nexport interface AlertProps extends OverlayLifecycleProps, Props {\n    /**\n     * Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canEscapeKeyCancel?: boolean;\n\n    /**\n     * Whether clicking outside the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canOutsideClickCancel?: boolean;\n\n    /**\n     * The text for the cancel button.\n     * If this prop is defined, then either `onCancel` or `onClose` must also be defined.\n     */\n    cancelButtonText?: string;\n\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * The text for the confirm (right-most) button.\n     * This button will always appear, and uses the value of the `intent` prop below.\n     *\n     * @default \"OK\"\n     */\n    confirmButtonText?: string;\n\n    /** Name of a Blueprint UI icon (or an icon element) to display on the left side. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * The intent to be applied to the confirm (right-most) button and the icon (if provided).\n     */\n    intent?: Intent;\n\n    /**\n     * Toggles the visibility of the alert.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * If set to `true`, the confirm button will be set to its loading state. The cancel button, if\n     * visible, will be disabled.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * CSS styles to apply to the alert.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n     * - clicking the cancel button (if `cancelButtonText` is defined)\n     * - pressing the escape key (if `canEscapeKeyCancel` is enabled)\n     * - clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n     *\n     * If any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.\n     */\n    onCancel?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n     * - clicking the confirm button\n     * - focusing on the confirm button and pressing `enter` or `space`\n     */\n    onConfirm?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\n     * First argument is `true` if confirmed, `false` otherwise.\n     * This is an alternative to defining separate `onConfirm` and `onCancel` handlers.\n     */\n    onClose?(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>): void;\n}\n\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport class Alert extends AbstractPureComponent<AlertProps> {\n    public static defaultProps: AlertProps = {\n        canEscapeKeyCancel: false,\n        canOutsideClickCancel: false,\n        confirmButtonText: \"OK\",\n        isOpen: false,\n        loading: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Alert`;\n\n    public render() {\n        const {\n            canEscapeKeyCancel,\n            canOutsideClickCancel,\n            children,\n            className,\n            icon,\n            intent,\n            loading,\n            cancelButtonText,\n            confirmButtonText,\n            onClose,\n            ...overlayProps\n        } = this.props;\n        return (\n            <Dialog\n                {...overlayProps}\n                className={classNames(Classes.ALERT, className)}\n                canEscapeKeyClose={canEscapeKeyCancel}\n                canOutsideClickClose={canOutsideClickCancel}\n                onClose={this.handleCancel}\n                portalContainer={this.props.portalContainer}\n            >\n                <div className={Classes.ALERT_BODY}>\n                    <Icon icon={icon} size={40} intent={intent} />\n                    <div className={Classes.ALERT_CONTENTS}>{children}</div>\n                </div>\n                <div className={Classes.ALERT_FOOTER}>\n                    <Button loading={loading} intent={intent} text={confirmButtonText} onClick={this.handleConfirm} />\n                    {cancelButtonText && (\n                        <Button text={cancelButtonText} disabled={loading} onClick={this.handleCancel} />\n                    )}\n                </div>\n            </Dialog>\n        );\n    }\n\n    protected validateProps(props: AlertProps) {\n        if (props.onClose == null && (props.cancelButtonText == null) !== (props.onCancel == null)) {\n            console.warn(ALERT_WARN_CANCEL_PROPS);\n        }\n\n        const hasCancelHandler = props.onCancel != null || props.onClose != null;\n        if (props.canEscapeKeyCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n        }\n        if (props.canOutsideClickCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n        }\n    }\n\n    private handleCancel = (evt?: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(false, evt);\n\n    private handleConfirm = (evt: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(true, evt);\n\n    private internalHandleCallbacks(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>) {\n        const { onCancel, onClose, onConfirm } = this.props;\n        (confirmed ? onConfirm : onCancel)?.(evt);\n        onClose?.(confirmed, evt);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}