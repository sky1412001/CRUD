{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { IconSize } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent, Classes, refHandler, setRef, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { getActiveElement } from \"../../common/utils\";\nimport { Icon } from \"../icon/icon\";\nimport { Tag } from \"../tag/tag\";\nimport { ResizableInput } from \"./resizableInput\";\n/** special value for absence of active tag */\nvar NONE = -1;\n/**\n * Tag input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tag-input\n */\nvar TagInput = /** @class */function (_super) {\n  __extends(TagInput, _super);\n  function TagInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      activeIndex: NONE,\n      inputValue: _this.props.inputValue || \"\",\n      isInputFocused: false\n    };\n    _this.inputElement = null;\n    _this.handleRef = refHandler(_this, \"inputElement\", _this.props.inputRef);\n    _this.addTags = function (value, method) {\n      if (method === void 0) {\n        method = \"default\";\n      }\n      var _a = _this.props,\n        inputValue = _a.inputValue,\n        onAdd = _a.onAdd,\n        onChange = _a.onChange,\n        values = _a.values;\n      var newValues = _this.getValues(value);\n      var shouldClearInput = (onAdd === null || onAdd === void 0 ? void 0 : onAdd(newValues, method)) !== false && inputValue === undefined;\n      // avoid a potentially expensive computation if this prop is omitted\n      if (Utils.isFunction(onChange)) {\n        shouldClearInput = onChange(__spreadArray(__spreadArray([], values, true), newValues, true)) !== false && shouldClearInput;\n      }\n      // only explicit return false cancels text clearing\n      if (shouldClearInput) {\n        _this.setState({\n          inputValue: \"\"\n        });\n      }\n    };\n    _this.maybeRenderTag = function (tag, index) {\n      if (!tag) {\n        return null;\n      }\n      var _a = _this.props,\n        large = _a.large,\n        tagProps = _a.tagProps;\n      var props = Utils.isFunction(tagProps) ? tagProps(tag, index) : tagProps;\n      return React.createElement(Tag, __assign({\n        active: index === _this.state.activeIndex,\n        \"data-tag-index\": index,\n        key: tag + \"__\" + index,\n        large: large,\n        onRemove: _this.props.disabled ? undefined : _this.handleRemoveTag\n      }, props), tag);\n    };\n    _this.handleContainerClick = function () {\n      var _a;\n      (_a = _this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();\n    };\n    _this.handleContainerBlur = function (_a) {\n      var currentTarget = _a.currentTarget;\n      _this.requestAnimationFrame(function () {\n        // we only care if the blur event is leaving the container.\n        // defer this check using rAF so activeElement will have updated.\n        var isFocusInsideContainer = currentTarget.contains(getActiveElement(_this.inputElement));\n        if (!isFocusInsideContainer) {\n          if (_this.props.addOnBlur && _this.state.inputValue !== undefined && _this.state.inputValue.length > 0) {\n            _this.addTags(_this.state.inputValue, \"blur\");\n          }\n          _this.setState({\n            activeIndex: NONE,\n            isInputFocused: false\n          });\n        }\n      });\n    };\n    _this.handleInputFocus = function (event) {\n      var _a, _b;\n      _this.setState({\n        isInputFocused: true\n      });\n      (_b = (_a = _this.props.inputProps) === null || _a === void 0 ? void 0 : _a.onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n    };\n    _this.handleInputChange = function (event) {\n      var _a, _b, _c, _d;\n      _this.setState({\n        activeIndex: NONE,\n        inputValue: event.currentTarget.value\n      });\n      (_b = (_a = _this.props).onInputChange) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n      (_d = (_c = _this.props.inputProps) === null || _c === void 0 ? void 0 : _c.onChange) === null || _d === void 0 ? void 0 : _d.call(_c, event);\n    };\n    _this.handleInputKeyDown = function (event) {\n      var _a = event.currentTarget,\n        selectionEnd = _a.selectionEnd,\n        value = _a.value;\n      var activeIndex = _this.state.activeIndex;\n      var activeIndexToEmit = activeIndex;\n      if (event.key === \"Enter\" && value.length > 0) {\n        _this.addTags(value, \"default\");\n      } else if (selectionEnd === 0 && _this.props.values.length > 0) {\n        // cursor at beginning of input allows interaction with tags.\n        // use selectionEnd to verify cursor position and no text selection.\n        if (event.key === \"ArrowLeft\" || event.key === \"ArrowRight\") {\n          var nextActiveIndex = _this.getNextActiveIndex(event.key === \"ArrowRight\" ? 1 : -1);\n          if (nextActiveIndex !== activeIndex) {\n            event.stopPropagation();\n            activeIndexToEmit = nextActiveIndex;\n            _this.setState({\n              activeIndex: nextActiveIndex\n            });\n          }\n        } else if (event.key === \"Backspace\") {\n          _this.handleBackspaceToRemove(event);\n        } else if (event.key === \"Delete\") {\n          _this.handleDeleteToRemove(event);\n        }\n      }\n      _this.invokeKeyPressCallback(\"onKeyDown\", event, activeIndexToEmit);\n    };\n    _this.handleInputKeyUp = function (event) {\n      _this.invokeKeyPressCallback(\"onKeyUp\", event, _this.state.activeIndex);\n    };\n    _this.handleInputPaste = function (event) {\n      var separator = _this.props.separator;\n      var value = event.clipboardData.getData(\"text\");\n      if (!_this.props.addOnPaste || value.length === 0) {\n        return;\n      }\n      // special case as a UX nicety: if the user pasted only one value with no delimiters in it, leave that value in\n      // the input field so that the user can refine it before converting it to a tag manually.\n      if (separator === false || value.split(separator).length === 1) {\n        return;\n      }\n      event.preventDefault();\n      _this.addTags(value, \"paste\");\n    };\n    _this.handleRemoveTag = function (event) {\n      // using data attribute to simplify callback logic -- one handler for all children\n      var index = +event.currentTarget.parentElement.getAttribute(\"data-tag-index\");\n      _this.removeIndexFromValues(index);\n    };\n    return _this;\n  }\n  TagInput.getDerivedStateFromProps = function (props, state) {\n    if (props.inputValue !== state.prevInputValueProp) {\n      return {\n        inputValue: props.inputValue,\n        prevInputValueProp: props.inputValue\n      };\n    }\n    return null;\n  };\n  TagInput.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      autoResize = _b.autoResize,\n      className = _b.className,\n      disabled = _b.disabled,\n      fill = _b.fill,\n      inputProps = _b.inputProps,\n      intent = _b.intent,\n      large = _b.large,\n      leftIcon = _b.leftIcon,\n      placeholder = _b.placeholder,\n      values = _b.values;\n    var classes = classNames(Classes.INPUT, Classes.TAG_INPUT, (_a = {}, _a[Classes.ACTIVE] = this.state.isInputFocused, _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a), Classes.intentClass(intent), className);\n    var isLarge = classes.indexOf(Classes.LARGE) > NONE;\n    // use placeholder prop only if it's defined and values list is empty or contains only falsy values\n    var isSomeValueDefined = values.some(function (val) {\n      return !!val;\n    });\n    var resolvedPlaceholder = placeholder == null || isSomeValueDefined ? inputProps === null || inputProps === void 0 ? void 0 : inputProps.placeholder : placeholder;\n    // final props that may be sent to <input> or <ResizableInput>\n    var resolvedInputProps = __assign(__assign({\n      value: this.state.inputValue\n    }, inputProps), {\n      className: classNames(Classes.INPUT_GHOST, inputProps === null || inputProps === void 0 ? void 0 : inputProps.className),\n      disabled: disabled,\n      onChange: this.handleInputChange,\n      onFocus: this.handleInputFocus,\n      onKeyDown: this.handleInputKeyDown,\n      onKeyUp: this.handleInputKeyUp,\n      onPaste: this.handleInputPaste,\n      placeholder: resolvedPlaceholder,\n      ref: this.handleRef\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      onBlur: this.handleContainerBlur,\n      onClick: this.handleContainerClick\n    }, React.createElement(Icon, {\n      className: Classes.TAG_INPUT_ICON,\n      icon: leftIcon,\n      size: isLarge ? IconSize.LARGE : IconSize.STANDARD\n    }), React.createElement(\"div\", {\n      className: Classes.TAG_INPUT_VALUES\n    }, values.map(this.maybeRenderTag), this.props.children, autoResize ? React.createElement(ResizableInput, __assign({}, resolvedInputProps)) : React.createElement(\"input\", __assign({}, resolvedInputProps))), this.props.rightElement);\n  };\n  TagInput.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.handleRef = refHandler(this, \"inputElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.inputElement);\n    }\n  };\n  TagInput.prototype.getNextActiveIndex = function (direction) {\n    var activeIndex = this.state.activeIndex;\n    if (activeIndex === NONE) {\n      // nothing active & moving left: select last defined value. otherwise select nothing.\n      return direction < 0 ? this.findNextIndex(this.props.values.length, -1) : NONE;\n    } else {\n      // otherwise, move in direction and clamp to bounds.\n      // note that upper bound allows going one beyond last item\n      // so focus can move off the right end, into the text input.\n      return this.findNextIndex(activeIndex, direction);\n    }\n  };\n  TagInput.prototype.findNextIndex = function (startIndex, direction) {\n    var values = this.props.values;\n    var index = startIndex + direction;\n    while (index > 0 && index < values.length && !values[index]) {\n      index += direction;\n    }\n    return Utils.clamp(index, 0, values.length);\n  };\n  /**\n   * Splits inputValue on separator prop,\n   * trims whitespace from each new value,\n   * and ignores empty values.\n   */\n  TagInput.prototype.getValues = function (inputValue) {\n    var separator = this.props.separator;\n    // NOTE: split() typings define two overrides for string and RegExp.\n    // this does not play well with our union prop type, so we'll just declare it as a valid type.\n    return (separator === false ? [inputValue] : inputValue.split(separator)).map(function (val) {\n      return val.trim();\n    }).filter(function (val) {\n      return val.length > 0;\n    });\n  };\n  TagInput.prototype.handleBackspaceToRemove = function (event) {\n    var previousActiveIndex = this.state.activeIndex;\n    // always move leftward one item (this will focus last item if nothing is focused)\n    this.setState({\n      activeIndex: this.getNextActiveIndex(-1)\n    });\n    // delete item if there was a previous valid selection (ignore first backspace to focus last item)\n    if (this.isValidIndex(previousActiveIndex)) {\n      event.stopPropagation();\n      this.removeIndexFromValues(previousActiveIndex);\n    }\n  };\n  TagInput.prototype.handleDeleteToRemove = function (event) {\n    var activeIndex = this.state.activeIndex;\n    if (this.isValidIndex(activeIndex)) {\n      event.stopPropagation();\n      this.removeIndexFromValues(activeIndex);\n    }\n  };\n  /** Remove the item at the given index by invoking `onRemove` and `onChange` accordingly. */\n  TagInput.prototype.removeIndexFromValues = function (index) {\n    var _a = this.props,\n      onChange = _a.onChange,\n      onRemove = _a.onRemove,\n      values = _a.values;\n    onRemove === null || onRemove === void 0 ? void 0 : onRemove(values[index], index);\n    onChange === null || onChange === void 0 ? void 0 : onChange(values.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n  TagInput.prototype.invokeKeyPressCallback = function (propCallbackName, event, activeIndex) {\n    var _a, _b, _c, _d;\n    (_b = (_a = this.props)[propCallbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, event, activeIndex === NONE ? undefined : activeIndex);\n    (_d = (_c = this.props.inputProps)[propCallbackName]) === null || _d === void 0 ? void 0 : _d.call(_c, event);\n  };\n  /** Returns whether the given index represents a valid item in `this.props.values`. */\n  TagInput.prototype.isValidIndex = function (index) {\n    return index !== NONE && index < this.props.values.length;\n  };\n  TagInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TagInput\");\n  TagInput.defaultProps = {\n    addOnBlur: false,\n    addOnPaste: true,\n    autoResize: false,\n    inputProps: {},\n    separator: /[,\\n\\r]/,\n    tagProps: {}\n  };\n  return TagInput;\n}(AbstractPureComponent);\nexport { TagInput };","map":{"version":3,"names":["classNames","React","IconSize","AbstractPureComponent","Classes","refHandler","setRef","Utils","DISPLAYNAME_PREFIX","getActiveElement","Icon","Tag","ResizableInput","NONE","TagInput","_super","__extends","_this","apply","arguments","state","activeIndex","inputValue","props","isInputFocused","inputElement","handleRef","inputRef","addTags","value","method","_a","onAdd","onChange","values","newValues","getValues","shouldClearInput","undefined","isFunction","__spreadArray","setState","maybeRenderTag","tag","index","large","tagProps","createElement","__assign","active","key","onRemove","disabled","handleRemoveTag","handleContainerClick","focus","handleContainerBlur","currentTarget","requestAnimationFrame","isFocusInsideContainer","contains","addOnBlur","length","handleInputFocus","event","_b","inputProps","onFocus","call","handleInputChange","onInputChange","_d","_c","handleInputKeyDown","selectionEnd","activeIndexToEmit","nextActiveIndex","getNextActiveIndex","stopPropagation","handleBackspaceToRemove","handleDeleteToRemove","invokeKeyPressCallback","handleInputKeyUp","handleInputPaste","separator","clipboardData","getData","addOnPaste","split","preventDefault","parentElement","getAttribute","removeIndexFromValues","getDerivedStateFromProps","prevInputValueProp","prototype","render","autoResize","className","fill","intent","leftIcon","placeholder","classes","INPUT","TAG_INPUT","ACTIVE","DISABLED","FILL","LARGE","intentClass","isLarge","indexOf","isSomeValueDefined","some","val","resolvedPlaceholder","resolvedInputProps","INPUT_GHOST","onKeyDown","onKeyUp","onPaste","ref","onBlur","onClick","TAG_INPUT_ICON","icon","size","STANDARD","TAG_INPUT_VALUES","map","children","rightElement","componentDidUpdate","prevProps","direction","findNextIndex","startIndex","clamp","trim","filter","previousActiveIndex","isValidIndex","_","i","propCallbackName","displayName","concat","defaultProps"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/tag-input/tagInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { IconName, IconSize } from \"@blueprintjs/icons\";\n\nimport { AbstractPureComponent, Classes, refHandler, setRef, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLInputProps, IntentProps, MaybeElement, Props } from \"../../common/props\";\nimport { getActiveElement } from \"../../common/utils\";\nimport { Icon } from \"../icon/icon\";\nimport { Tag, TagProps } from \"../tag/tag\";\nimport { ResizableInput } from \"./resizableInput\";\n\n/**\n * The method in which a `TagInput` value was added.\n * - `\"default\"` - indicates that a value was added by manual selection.\n * - `\"blur\"` - indicates that a value was added when the `TagInput` lost focus.\n *   This is only possible when `addOnBlur=true`.\n * - `\"paste\"` - indicates that a value was added via paste. This is only\n *   possible when `addOnPaste=true`.\n */\nexport type TagInputAddMethod = \"default\" | \"blur\" | \"paste\";\n\nexport interface TagInputProps extends IntentProps, Props {\n    /**\n     * If true, `onAdd` will be invoked when the input loses focus.\n     * Otherwise, `onAdd` is only invoked when `enter` is pressed.\n     *\n     * @default false\n     */\n    addOnBlur?: boolean;\n\n    /**\n     * If true, `onAdd` will be invoked when the user pastes text containing the `separator`\n     * into the input. Otherwise, pasted text will remain in the input.\n     *\n     * __Note:__ For example, if `addOnPaste=true` and `separator=\"\\n\"` (new line), then:\n     * - Pasting `\"hello\"` will _not_ invoke `onAdd`\n     * - Pasting `\"hello\\n\"` will invoke `onAdd` with `[\"hello\"]`\n     * - Pasting `\"hello\\nworld\"` will invoke `onAdd` with `[\"hello\", \"world\"]`\n     *\n     * @default true\n     */\n    addOnPaste?: boolean;\n\n    /**\n     * Whether the component should automatically resize as a user types in the text input.\n     * This will have no effect when `fill={true}`.\n     *\n     * @default false\n     */\n    autoResize?: boolean;\n\n    /**\n     * Optional child elements which will be rendered between the selected tags and\n     * the text input. Rendering children is usually unnecessary.\n     *\n     * @default undefined\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the component is non-interactive.\n     * Note that you'll also need to disable the component's `rightElement`,\n     * if appropriate.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /** Whether the tag input should take up the full width of its container. */\n    fill?: boolean;\n\n    /**\n     * React props to pass to the `<input>` element.\n     * Note that `ref` and `key` are not supported here; use `inputRef` below.\n     * Also note that `inputProps.style.width` will be overriden if `autoResize={true}`.\n     */\n    inputProps?: HTMLInputProps;\n\n    /** Ref handler for the `<input>` element. */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /** Controlled value of the `<input>` element. This is shorthand for `inputProps={{ value }}`. */\n    inputValue?: string;\n\n    /** Whether the tag input should use a large size. */\n    large?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render on the left side of the input. */\n    leftIcon?: IconName | MaybeElement;\n\n    /**\n     * Callback invoked when new tags are added by the user pressing `enter` on the input.\n     * Receives the current value of the input field split by `separator` into an array.\n     * New tags are expected to be appended to the list.\n     *\n     * The input will be cleared after `onAdd` is invoked _unless_ the callback explicitly\n     * returns `false`. This is useful if the provided `value` is somehow invalid and should\n     * not be added as a tag.\n     */\n    onAdd?: (values: string[], method: TagInputAddMethod) => boolean | void;\n\n    /**\n     * Callback invoked when new tags are added or removed. Receives the updated list of `values`:\n     * new tags are appended to the end of the list, removed tags are removed at their index.\n     *\n     * Like `onAdd`, the input will be cleared after this handler is invoked _unless_ the callback\n     * explicitly returns `false`.\n     *\n     * This callback essentially implements basic `onAdd` and `onRemove` functionality and merges\n     * the two handlers into one to simplify controlled usage.\n     * ```\n     */\n    onChange?: (values: React.ReactNode[]) => boolean | void;\n\n    /**\n     * Callback invoked when the value of `<input>` element is changed.\n     * This is shorthand for `inputProps={{ onChange }}`.\n     */\n    onInputChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * Callback invoked when the user depresses a keyboard key.\n     * Receives the event and the index of the active tag (or `undefined` if\n     * focused in the input).\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLElement>, index?: number) => void;\n\n    /**\n     * Callback invoked when the user releases a keyboard key.\n     * Receives the event and the index of the active tag (or `undefined` if\n     * focused in the input).\n     */\n    onKeyUp?: (event: React.KeyboardEvent<HTMLElement>, index?: number) => void;\n\n    /**\n     * Callback invoked when the user clicks the X button on a tag.\n     * Receives value and index of removed tag.\n     */\n    onRemove?: (value: React.ReactNode, index: number) => void;\n\n    /**\n     * Input placeholder text which will not appear if `values` contains any items\n     * (consistent with default HTML input behavior).\n     * Use `inputProps.placeholder` if you want the placeholder text to _always_ appear.\n     *\n     * If you define both `placeholder` and `inputProps.placeholder`, then the former will appear\n     * when `values` is empty and the latter at all other times.\n     */\n    placeholder?: string;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a small spinner or minimal button (button height will adjust if `TagInput` uses large styles).\n     * Other elements will likely require custom styles for correct positioning.\n     */\n    rightElement?: JSX.Element;\n\n    /**\n     * Separator pattern used to split input text into multiple values. Default value splits on commas and newlines.\n     * Explicit `false` value disables splitting (note that `onAdd` will still receive an array of length 1).\n     *\n     * @default /[,\\n\\r]/\n     */\n    separator?: string | RegExp | false;\n\n    /**\n     * React props to pass to each `Tag`. Provide an object to pass the same props to every tag,\n     * or a function to customize props per tag.\n     *\n     * If you define `onRemove` here then you will have to implement your own tag removal\n     * handling as `TagInput`'s own `onRemove` handler will never be invoked.\n     */\n    tagProps?: TagProps | ((value: React.ReactNode, index: number) => TagProps);\n\n    /**\n     * Controlled tag values. Each value will be rendered inside a `Tag`, which can be customized\n     * using `tagProps`. Therefore, any valid React node can be used as a `TagInput` value; falsy\n     * values will not be rendered.\n     */\n    values: readonly React.ReactNode[];\n}\n\nexport interface TagInputState {\n    activeIndex: number;\n    inputValue: string;\n    isInputFocused: boolean;\n    prevInputValueProp?: string;\n}\n\n/** special value for absence of active tag */\nconst NONE = -1;\n\n/**\n * Tag input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tag-input\n */\nexport class TagInput extends AbstractPureComponent<TagInputProps, TagInputState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TagInput`;\n\n    public static defaultProps: Partial<TagInputProps> = {\n        addOnBlur: false,\n        addOnPaste: true,\n        autoResize: false,\n        inputProps: {},\n        separator: /[,\\n\\r]/,\n        tagProps: {},\n    };\n\n    public static getDerivedStateFromProps(\n        props: Readonly<TagInputProps>,\n        state: Readonly<TagInputState>,\n    ): Partial<TagInputState> | null {\n        if (props.inputValue !== state.prevInputValueProp) {\n            return {\n                inputValue: props.inputValue,\n                prevInputValueProp: props.inputValue,\n            };\n        }\n        return null;\n    }\n\n    public state: TagInputState = {\n        activeIndex: NONE,\n        inputValue: this.props.inputValue || \"\",\n        isInputFocused: false,\n    };\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private handleRef: React.Ref<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputRef);\n\n    public render() {\n        const { autoResize, className, disabled, fill, inputProps, intent, large, leftIcon, placeholder, values } =\n            this.props;\n\n        const classes = classNames(\n            Classes.INPUT,\n            Classes.TAG_INPUT,\n            {\n                [Classes.ACTIVE]: this.state.isInputFocused,\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n            },\n            Classes.intentClass(intent),\n            className,\n        );\n        const isLarge = classes.indexOf(Classes.LARGE) > NONE;\n\n        // use placeholder prop only if it's defined and values list is empty or contains only falsy values\n        const isSomeValueDefined = values.some(val => !!val);\n        const resolvedPlaceholder = placeholder == null || isSomeValueDefined ? inputProps?.placeholder : placeholder;\n\n        // final props that may be sent to <input> or <ResizableInput>\n        const resolvedInputProps = {\n            value: this.state.inputValue,\n            ...inputProps,\n            className: classNames(Classes.INPUT_GHOST, inputProps?.className),\n            disabled,\n            onChange: this.handleInputChange,\n            onFocus: this.handleInputFocus,\n            onKeyDown: this.handleInputKeyDown,\n            onKeyUp: this.handleInputKeyUp,\n            onPaste: this.handleInputPaste,\n            placeholder: resolvedPlaceholder,\n            ref: this.handleRef,\n        };\n\n        return (\n            <div className={classes} onBlur={this.handleContainerBlur} onClick={this.handleContainerClick}>\n                <Icon\n                    className={Classes.TAG_INPUT_ICON}\n                    icon={leftIcon}\n                    size={isLarge ? IconSize.LARGE : IconSize.STANDARD}\n                />\n                <div className={Classes.TAG_INPUT_VALUES}>\n                    {values.map(this.maybeRenderTag)}\n                    {this.props.children}\n                    {autoResize ? <ResizableInput {...resolvedInputProps} /> : <input {...resolvedInputProps} />}\n                </div>\n                {this.props.rightElement}\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: TagInputProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"inputElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.inputElement);\n        }\n    }\n\n    private addTags = (value: string, method: TagInputAddMethod = \"default\") => {\n        const { inputValue, onAdd, onChange, values } = this.props;\n        const newValues = this.getValues(value);\n        let shouldClearInput = onAdd?.(newValues, method) !== false && inputValue === undefined;\n        // avoid a potentially expensive computation if this prop is omitted\n        if (Utils.isFunction(onChange)) {\n            shouldClearInput = onChange([...values, ...newValues]) !== false && shouldClearInput;\n        }\n        // only explicit return false cancels text clearing\n        if (shouldClearInput) {\n            this.setState({ inputValue: \"\" });\n        }\n    };\n\n    private maybeRenderTag = (tag: React.ReactNode, index: number) => {\n        if (!tag) {\n            return null;\n        }\n        const { large, tagProps } = this.props;\n        const props = Utils.isFunction(tagProps) ? tagProps(tag, index) : tagProps;\n        return (\n            <Tag\n                active={index === this.state.activeIndex}\n                data-tag-index={index}\n                key={tag + \"__\" + index}\n                large={large}\n                onRemove={this.props.disabled ? undefined : this.handleRemoveTag}\n                {...props}\n            >\n                {tag}\n            </Tag>\n        );\n    };\n\n    private getNextActiveIndex(direction: number) {\n        const { activeIndex } = this.state;\n        if (activeIndex === NONE) {\n            // nothing active & moving left: select last defined value. otherwise select nothing.\n            return direction < 0 ? this.findNextIndex(this.props.values.length, -1) : NONE;\n        } else {\n            // otherwise, move in direction and clamp to bounds.\n            // note that upper bound allows going one beyond last item\n            // so focus can move off the right end, into the text input.\n            return this.findNextIndex(activeIndex, direction);\n        }\n    }\n\n    private findNextIndex(startIndex: number, direction: number) {\n        const { values } = this.props;\n        let index = startIndex + direction;\n        while (index > 0 && index < values.length && !values[index]) {\n            index += direction;\n        }\n        return Utils.clamp(index, 0, values.length);\n    }\n\n    /**\n     * Splits inputValue on separator prop,\n     * trims whitespace from each new value,\n     * and ignores empty values.\n     */\n    private getValues(inputValue: string) {\n        const { separator } = this.props;\n        // NOTE: split() typings define two overrides for string and RegExp.\n        // this does not play well with our union prop type, so we'll just declare it as a valid type.\n        return (separator === false ? [inputValue] : inputValue.split(separator as string))\n            .map(val => val.trim())\n            .filter(val => val.length > 0);\n    }\n\n    private handleContainerClick = () => {\n        this.inputElement?.focus();\n    };\n\n    private handleContainerBlur = ({ currentTarget }: React.FocusEvent<HTMLDivElement>) => {\n        this.requestAnimationFrame(() => {\n            // we only care if the blur event is leaving the container.\n            // defer this check using rAF so activeElement will have updated.\n            const isFocusInsideContainer = currentTarget.contains(getActiveElement(this.inputElement));\n            if (!isFocusInsideContainer) {\n                if (this.props.addOnBlur && this.state.inputValue !== undefined && this.state.inputValue.length > 0) {\n                    this.addTags(this.state.inputValue, \"blur\");\n                }\n                this.setState({ activeIndex: NONE, isInputFocused: false });\n            }\n        });\n    };\n\n    private handleInputFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n        this.setState({ isInputFocused: true });\n        this.props.inputProps?.onFocus?.(event);\n    };\n\n    private handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ activeIndex: NONE, inputValue: event.currentTarget.value });\n        this.props.onInputChange?.(event);\n        this.props.inputProps?.onChange?.(event);\n    };\n\n    private handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        const { selectionEnd, value } = event.currentTarget;\n        const { activeIndex } = this.state;\n\n        let activeIndexToEmit = activeIndex;\n\n        if (event.key === \"Enter\" && value.length > 0) {\n            this.addTags(value, \"default\");\n        } else if (selectionEnd === 0 && this.props.values.length > 0) {\n            // cursor at beginning of input allows interaction with tags.\n            // use selectionEnd to verify cursor position and no text selection.\n            if (event.key === \"ArrowLeft\" || event.key === \"ArrowRight\") {\n                const nextActiveIndex = this.getNextActiveIndex(event.key === \"ArrowRight\" ? 1 : -1);\n                if (nextActiveIndex !== activeIndex) {\n                    event.stopPropagation();\n                    activeIndexToEmit = nextActiveIndex;\n                    this.setState({ activeIndex: nextActiveIndex });\n                }\n            } else if (event.key === \"Backspace\") {\n                this.handleBackspaceToRemove(event);\n            } else if (event.key === \"Delete\") {\n                this.handleDeleteToRemove(event);\n            }\n        }\n\n        this.invokeKeyPressCallback(\"onKeyDown\", event, activeIndexToEmit);\n    };\n\n    private handleInputKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        this.invokeKeyPressCallback(\"onKeyUp\", event, this.state.activeIndex);\n    };\n\n    private handleInputPaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n        const { separator } = this.props;\n        const value = event.clipboardData.getData(\"text\");\n\n        if (!this.props.addOnPaste || value.length === 0) {\n            return;\n        }\n\n        // special case as a UX nicety: if the user pasted only one value with no delimiters in it, leave that value in\n        // the input field so that the user can refine it before converting it to a tag manually.\n        if (separator === false || value.split(separator!).length === 1) {\n            return;\n        }\n\n        event.preventDefault();\n        this.addTags(value, \"paste\");\n    };\n\n    private handleRemoveTag = (event: React.MouseEvent<HTMLSpanElement>) => {\n        // using data attribute to simplify callback logic -- one handler for all children\n        const index = +event.currentTarget.parentElement!.getAttribute(\"data-tag-index\")!;\n        this.removeIndexFromValues(index);\n    };\n\n    private handleBackspaceToRemove(event: React.KeyboardEvent<HTMLInputElement>) {\n        const previousActiveIndex = this.state.activeIndex;\n        // always move leftward one item (this will focus last item if nothing is focused)\n        this.setState({ activeIndex: this.getNextActiveIndex(-1) });\n        // delete item if there was a previous valid selection (ignore first backspace to focus last item)\n        if (this.isValidIndex(previousActiveIndex)) {\n            event.stopPropagation();\n            this.removeIndexFromValues(previousActiveIndex);\n        }\n    }\n\n    private handleDeleteToRemove(event: React.KeyboardEvent<HTMLInputElement>) {\n        const { activeIndex } = this.state;\n        if (this.isValidIndex(activeIndex)) {\n            event.stopPropagation();\n            this.removeIndexFromValues(activeIndex);\n        }\n    }\n\n    /** Remove the item at the given index by invoking `onRemove` and `onChange` accordingly. */\n    private removeIndexFromValues(index: number) {\n        const { onChange, onRemove, values } = this.props;\n        onRemove?.(values[index], index);\n        onChange?.(values.filter((_, i) => i !== index));\n    }\n\n    private invokeKeyPressCallback(\n        propCallbackName: \"onKeyDown\" | \"onKeyUp\",\n        event: React.KeyboardEvent<HTMLInputElement>,\n        activeIndex: number,\n    ) {\n        this.props[propCallbackName]?.(event, activeIndex === NONE ? undefined : activeIndex);\n        this.props.inputProps![propCallbackName]?.(event);\n    }\n\n    /** Returns whether the given index represents a valid item in `this.props.values`. */\n    private isValidIndex(index: number) {\n        return index !== NONE && index < this.props.values.length;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}