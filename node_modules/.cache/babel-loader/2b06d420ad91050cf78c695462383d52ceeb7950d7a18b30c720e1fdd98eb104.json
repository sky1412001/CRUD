{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, DISPLAYNAME_PREFIX } from \"../../common\";\n/**\n * Resize sensor component.\n *\n * It requires a single DOM element child and will error otherwise.\n *\n * @see https://blueprintjs.com/docs/#core/components/resize-sensor\n **/\nvar ResizeSensor = /** @class */function (_super) {\n  __extends(ResizeSensor, _super);\n  function ResizeSensor() {\n    var _this = this;\n    var _a;\n    _this = _super.apply(this, arguments) || this;\n    _this.targetRef = (_a = _this.props.targetRef) !== null && _a !== void 0 ? _a : React.createRef();\n    _this.prevElement = undefined;\n    _this.observer = globalThis.ResizeObserver != null ? new ResizeObserver(function (entries) {\n      var _a, _b;\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    }) : undefined;\n    return _this;\n  }\n  ResizeSensor.prototype.render = function () {\n    var onlyChild = React.Children.only(this.props.children);\n    // if we're provided a ref to the child already, we don't need to attach one ourselves\n    if (this.props.targetRef !== undefined) {\n      return onlyChild;\n    }\n    return React.cloneElement(onlyChild, {\n      ref: this.targetRef\n    });\n  };\n  ResizeSensor.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n  ResizeSensor.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n  ResizeSensor.prototype.componentWillUnmount = function () {\n    var _a;\n    (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();\n    this.prevElement = undefined;\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n  ResizeSensor.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n    if (this.observer == null) {\n      return;\n    }\n    if (!(this.targetRef.current instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n    if (this.targetRef.current === this.prevElement && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect();\n      // remember element reference for next time\n      this.prevElement = this.targetRef.current;\n    }\n    // observer callback is invoked immediately when observing new elements\n    this.observer.observe(this.targetRef.current);\n    if (this.props.observeParents) {\n      var parent_1 = this.targetRef.current.parentElement;\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n  ResizeSensor.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ResizeSensor\");\n  return ResizeSensor;\n}(AbstractPureComponent);\nexport { ResizeSensor };","map":{"version":3,"names":["React","AbstractPureComponent","DISPLAYNAME_PREFIX","ResizeSensor","_super","__extends","_this","targetRef","_a","props","createRef","prevElement","undefined","observer","globalThis","ResizeObserver","entries","_b","onResize","call","prototype","render","onlyChild","Children","only","children","cloneElement","ref","componentDidMount","observeElement","componentDidUpdate","prevProps","observeParents","componentWillUnmount","disconnect","force","current","Element","observe","parent_1","parentElement","displayName","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/resize-sensor/resizeSensor.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent, DISPLAYNAME_PREFIX } from \"../../common\";\n\n// backwards-compatible with @blueprintjs/core v4.x\nexport type ResizeEntry = ResizeObserverEntry;\n\n/** `ResizeSensor` requires a single DOM element child and will error otherwise. */\nexport interface ResizeSensorProps {\n    /**\n     * Single child, must be an element and not a string or fragment.\n     */\n    children: JSX.Element;\n\n    /**\n     * Callback invoked when the wrapped element resizes.\n     *\n     * The `entries` array contains an entry for each observed element. In the\n     * default case (no `observeParents`), the array will contain only one\n     * element: the single child of the `ResizeSensor`.\n     *\n     * Note that this method is called _asynchronously_ after a resize is\n     * detected and typically it will be called no more than once per frame.\n     */\n    onResize: (entries: ResizeObserverEntry[]) => void;\n\n    /**\n     * If `true`, all parent DOM elements of the container will also be\n     * observed for size changes. The array of entries passed to `onResize`\n     * will now contain an entry for each parent element up to the root of the\n     * document.\n     *\n     * Only enable this prop if a parent element resizes in a way that does\n     * not also cause the child element to resize.\n     *\n     * @default false\n     */\n    observeParents?: boolean;\n\n    /**\n     * If you attach a `ref` to the child yourself when rendering it, you must pass the\n     * same value here (otherwise, ResizeSensor won't be able to attach its own).\n     */\n    targetRef?: React.RefObject<HTMLElement>;\n}\n\n/**\n * Resize sensor component.\n *\n * It requires a single DOM element child and will error otherwise.\n *\n * @see https://blueprintjs.com/docs/#core/components/resize-sensor\n **/\nexport class ResizeSensor extends AbstractPureComponent<ResizeSensorProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.ResizeSensor`;\n\n    private targetRef = this.props.targetRef ?? React.createRef<HTMLElement>();\n\n    private prevElement: HTMLElement | undefined = undefined;\n\n    private observer =\n        globalThis.ResizeObserver != null ? new ResizeObserver(entries => this.props.onResize?.(entries)) : undefined;\n\n    public render(): React.ReactNode {\n        const onlyChild = React.Children.only(this.props.children);\n\n        // if we're provided a ref to the child already, we don't need to attach one ourselves\n        if (this.props.targetRef !== undefined) {\n            return onlyChild;\n        }\n\n        return React.cloneElement(onlyChild, { ref: this.targetRef });\n    }\n\n    public componentDidMount() {\n        this.observeElement();\n    }\n\n    public componentDidUpdate(prevProps: ResizeSensorProps) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    }\n\n    public componentWillUnmount() {\n        this.observer?.disconnect();\n        this.prevElement = undefined;\n    }\n\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    private observeElement(force = false) {\n        if (this.observer == null) {\n            return;\n        }\n\n        if (!(this.targetRef.current instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n\n        if (this.targetRef.current === this.prevElement && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        } else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.prevElement = this.targetRef.current;\n        }\n\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(this.targetRef.current);\n\n        if (this.props.observeParents) {\n            let parent = this.targetRef.current.parentElement;\n            while (parent != null) {\n                this.observer.observe(parent);\n                parent = parent.parentElement;\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}