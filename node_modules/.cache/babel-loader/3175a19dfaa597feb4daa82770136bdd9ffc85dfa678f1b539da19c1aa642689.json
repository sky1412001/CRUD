{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { IconNames } from \"./iconNames\";\nimport { IconSize } from \"./iconTypes\";\nimport { wrapWithTimer } from \"./loaderUtils\";\nfunction getLoaderFn(options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, loader;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = options.loader, loader = _a === void 0 ? singleton.defaultLoader : _a;\n          if (!(typeof loader === \"function\")) return [3 /*break*/, 1];\n          return [2 /*return*/, loader];\n        case 1:\n          if (!(loader === \"all\")) return [3 /*break*/, 3];\n          return [4 /*yield*/, import(\"./paths-loaders/allPathsLoader\")];\n        case 2:\n          return [2 /*return*/, _b.sent().allPathsLoader];\n        case 3:\n          return [4 /*yield*/, import(\"./paths-loaders/splitPathsBySizeLoader\")];\n        case 4:\n          return [2 /*return*/, _b.sent().splitPathsBySizeLoader];\n      }\n    });\n  });\n}\n/**\n * Blueprint icons loader.\n */\nvar Icons = /** @class */function () {\n  function Icons() {\n    /** @internal */\n    this.defaultLoader = \"split-by-size\";\n    /** @internal */\n    this.loadedIconPaths16 = new Map();\n    /** @internal */\n    this.loadedIconPaths20 = new Map();\n  }\n  /**\n   * Set global icon loading options for all subsequent `Icons.load()` calls.\n   */\n  Icons.setLoaderOptions = function (options) {\n    if (options.loader !== undefined) {\n      singleton.defaultLoader = options.loader;\n    }\n  };\n  Icons.load = function (icons, size, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!Array.isArray(icons)) {\n              icons = [icons];\n            }\n            return [4 /*yield*/, Promise.all(icons.map(function (icon) {\n              return _this.loadImpl(icon, size, options);\n            }))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Load all available icons for use in Blueprint components.\n   */\n  Icons.loadAll = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allIcons;\n      var _this = this;\n      return __generator(this, function (_a) {\n        allIcons = Object.values(IconNames);\n        wrapWithTimer(\"[Blueprint] loading all icons\", function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, Promise.all([this.load(allIcons, IconSize.STANDARD, options), this.load(allIcons, IconSize.LARGE, options)])];\n                case 1:\n                  _a.sent();\n                  return [2 /*return*/];\n              }\n            });\n          });\n        });\n\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Get the icon SVG paths. Returns `undefined` if the icon has not been loaded yet.\n   */\n  Icons.getPaths = function (icon, size) {\n    if (!this.isValidIconName(icon)) {\n      // don't warn, since this.load() will have warned already\n      return undefined;\n    }\n    var loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n    return loadedIcons.get(icon);\n  };\n  Icons.loadImpl = function (icon, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var loadedIcons, loaderFn, supportedSize, paths, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isValidIconName(icon)) {\n              console.error(\"[Blueprint] Unknown icon '\".concat(icon, \"'\"));\n              return [2 /*return*/];\n            }\n\n            loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n            if (loadedIcons.has(icon)) {\n              // already loaded, no-op\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, getLoaderFn(options)];\n          case 1:\n            loaderFn = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            supportedSize = size < IconSize.LARGE ? IconSize.STANDARD : IconSize.LARGE;\n            return [4 /*yield*/, loaderFn(icon, supportedSize)];\n          case 3:\n            paths = _a.sent();\n            loadedIcons.set(icon, paths);\n            return [3 /*break*/, 5];\n          case 4:\n            e_1 = _a.sent();\n            console.error(\"[Blueprint] Unable to load \".concat(size, \"px icon '\").concat(icon, \"'\"), e_1);\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @returns true if the given string is a valid {@link IconName}\n   */\n  Icons.isValidIconName = function (iconName) {\n    var allIcons = Object.values(IconNames);\n    return allIcons.indexOf(iconName) >= 0;\n  };\n  return Icons;\n}();\nexport { Icons };\nvar singleton = new Icons();","map":{"version":3,"names":["IconNames","IconSize","wrapWithTimer","getLoaderFn","options","_a","loader","singleton","defaultLoader","_b","sent","allPathsLoader","splitPathsBySizeLoader","Icons","loadedIconPaths16","Map","loadedIconPaths20","setLoaderOptions","undefined","load","icons","size","Array","isArray","Promise","all","map","icon","_this","loadImpl","loadAll","allIcons","Object","values","__awaiter","STANDARD","LARGE","getPaths","isValidIconName","loadedIcons","get","console","error","concat","has","loaderFn","supportedSize","paths","set","e_1","iconName","indexOf"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/icons/src/iconLoader.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type IconName, IconNames } from \"./iconNames\";\nimport { type IconPaths, IconSize } from \"./iconTypes\";\nimport { wrapWithTimer } from \"./loaderUtils\";\n\n/** Given an icon name and size, loads the icon paths that define it. */\nexport type IconPathsLoader = (iconName: IconName, iconSize: IconSize) => Promise<IconPaths>;\n\nexport interface IconLoaderOptions {\n    /**\n     * The id of a built-in loader, or a custom loader function.\n     *\n     * @see https://blueprintjs.com/docs/versions/5/#icons/loading-icons\n     * @default undefined (equivalent to \"split-by-size\")\n     */\n    loader?: \"split-by-size\" | \"all\" | IconPathsLoader;\n}\n\nasync function getLoaderFn(options: IconLoaderOptions): Promise<IconPathsLoader> {\n    const { loader = singleton.defaultLoader } = options;\n\n    if (typeof loader === \"function\") {\n        return loader;\n    } else if (loader === \"all\") {\n        return (await import(\"./paths-loaders/allPathsLoader\")).allPathsLoader;\n    } else {\n        return (await import(\"./paths-loaders/splitPathsBySizeLoader\")).splitPathsBySizeLoader;\n    }\n}\n\n/**\n * Blueprint icons loader.\n */\nexport class Icons {\n    /** @internal */\n    public defaultLoader: IconLoaderOptions[\"loader\"] = \"split-by-size\";\n\n    /** @internal */\n    public loadedIconPaths16: Map<IconName, IconPaths> = new Map();\n\n    /** @internal */\n    public loadedIconPaths20: Map<IconName, IconPaths> = new Map();\n\n    /**\n     * Set global icon loading options for all subsequent `Icons.load()` calls.\n     */\n    public static setLoaderOptions(options: IconLoaderOptions) {\n        if (options.loader !== undefined) {\n            singleton.defaultLoader = options.loader;\n        }\n    }\n\n    /**\n     * Load a single icon for use in Blueprint components.\n     */\n    public static async load(icon: IconName, size: IconSize, options?: IconLoaderOptions): Promise<void>;\n    /**\n     * Load a set of icons for use in Blueprint components.\n     */\n    // buggy rule implementation for TS\n    // eslint-disable-next-line @typescript-eslint/unified-signatures\n    public static async load(icons: IconName[], size: number, options?: IconLoaderOptions): Promise<void>;\n    public static async load(icons: IconName | IconName[], size: number, options?: IconLoaderOptions) {\n        if (!Array.isArray(icons)) {\n            icons = [icons];\n        }\n\n        await Promise.all(icons.map(icon => this.loadImpl(icon, size, options)));\n        return;\n    }\n\n    /**\n     * Load all available icons for use in Blueprint components.\n     */\n    public static async loadAll(options?: IconLoaderOptions) {\n        const allIcons = Object.values(IconNames);\n        wrapWithTimer(`[Blueprint] loading all icons`, async () => {\n            await Promise.all([\n                this.load(allIcons, IconSize.STANDARD, options),\n                this.load(allIcons, IconSize.LARGE, options),\n            ]);\n        });\n    }\n\n    /**\n     * Get the icon SVG paths. Returns `undefined` if the icon has not been loaded yet.\n     */\n    public static getPaths(icon: IconName, size: IconSize): IconPaths | undefined {\n        if (!this.isValidIconName(icon)) {\n            // don't warn, since this.load() will have warned already\n            return undefined;\n        }\n\n        const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n        return loadedIcons.get(icon);\n    }\n\n    private static async loadImpl(icon: IconName, size: number, options: IconLoaderOptions = {}) {\n        if (!this.isValidIconName(icon)) {\n            console.error(`[Blueprint] Unknown icon '${icon}'`);\n            return;\n        }\n\n        const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n\n        if (loadedIcons.has(icon)) {\n            // already loaded, no-op\n            return;\n        }\n\n        const loaderFn = await getLoaderFn(options);\n\n        try {\n            const supportedSize = size < IconSize.LARGE ? IconSize.STANDARD : IconSize.LARGE;\n            const paths = await loaderFn(icon, supportedSize);\n            loadedIcons.set(icon, paths);\n        } catch (e) {\n            console.error(`[Blueprint] Unable to load ${size}px icon '${icon}'`, e);\n        }\n    }\n\n    /**\n     * @returns true if the given string is a valid {@link IconName}\n     */\n    public static isValidIconName(iconName: string): iconName is IconName {\n        const allIcons: IconName[] = Object.values(IconNames);\n        return allIcons.indexOf(iconName as IconName) >= 0;\n    }\n}\n\nconst singleton = new Icons();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}