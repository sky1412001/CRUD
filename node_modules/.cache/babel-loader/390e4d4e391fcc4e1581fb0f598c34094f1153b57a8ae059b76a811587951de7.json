{"ast":null,"code":"/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar uniqueCountForNamespace = new Map();\n/** Generate a unique ID within a given namespace, using a simple counter-based implementation to avoid collisions. */\nexport function uniqueId(namespace) {\n  var _a;\n  var curCount = (_a = uniqueCountForNamespace.get(namespace)) !== null && _a !== void 0 ? _a : 0;\n  uniqueCountForNamespace.set(namespace, curCount + 1);\n  return \"\".concat(namespace, \"-\").concat(curCount);\n}","map":{"version":3,"names":["uniqueCountForNamespace","Map","uniqueId","namespace","curCount","_a","get","set","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/icons/src/jsUtils.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst uniqueCountForNamespace = new Map<string, number>();\n/** Generate a unique ID within a given namespace, using a simple counter-based implementation to avoid collisions. */\nexport function uniqueId(namespace: string) {\n    const curCount = uniqueCountForNamespace.get(namespace) ?? 0;\n    uniqueCountForNamespace.set(namespace, curCount + 1);\n    return `${namespace}-${curCount}`;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,IAAMA,uBAAuB,GAAG,IAAIC,GAAG,EAAkB;AACzD;AACA,OAAM,SAAUC,QAAQA,CAACC,SAAiB;;EACtC,IAAMC,QAAQ,GAAG,CAAAC,EAAA,GAAAL,uBAAuB,CAACM,GAAG,CAACH,SAAS,CAAC,cAAAE,EAAA,cAAAA,EAAA,GAAI,CAAC;EAC5DL,uBAAuB,CAACO,GAAG,CAACJ,SAAS,EAAEC,QAAQ,GAAG,CAAC,CAAC;EACpD,OAAO,GAAAI,MAAA,CAAGL,SAAS,OAAAK,MAAA,CAAIJ,QAAQ,CAAE;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}