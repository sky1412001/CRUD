{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport var PanelView2 = function (props) {\n  var handleClose = React.useCallback(function () {\n    return props.onClose(props.panel);\n  }, [props.onClose, props.panel]);\n  var maybeBackButton = props.previousPanel === undefined ? null : React.createElement(Button, {\n    \"aria-label\": \"Back\",\n    className: Classes.PANEL_STACK_HEADER_BACK,\n    icon: \"chevron-left\",\n    minimal: true,\n    onClick: handleClose,\n    small: true,\n    text: props.previousPanel.title,\n    title: props.previousPanel.htmlTitle\n  });\n  // `props.panel.renderPanel` is simply a function that returns a JSX.Element. It may be an FC which\n  // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n  // those hooks with their own lifecycle through a very simple wrapper component.\n  var PanelWrapper = React.useMemo(function () {\n    return function () {\n      // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n      // instantiated with a type unrelated to our generic constraint `T` here. We know\n      // we're sending the right values here though, and it makes the consumer API for this\n      // component type safe, so it's ok to do this...\n      return props.panel.renderPanel(__assign({\n        closePanel: handleClose,\n        openPanel: props.onOpen\n      }, props.panel.props));\n    };\n  }, [props.panel, props.onOpen]);\n  return React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_VIEW\n  }, props.showHeader && React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_HEADER\n  }, React.createElement(\"span\", null, maybeBackButton), React.createElement(Text, {\n    className: Classes.HEADING,\n    ellipsize: true,\n    title: props.panel.htmlTitle\n  }, props.panel.title), React.createElement(\"span\", null)), React.createElement(PanelWrapper, null));\n};\nPanelView2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelView2\");","map":{"version":3,"names":["React","Classes","DISPLAYNAME_PREFIX","Button","Text","PanelView2","props","handleClose","useCallback","onClose","panel","maybeBackButton","previousPanel","undefined","createElement","className","PANEL_STACK_HEADER_BACK","icon","minimal","onClick","small","text","title","htmlTitle","PanelWrapper","useMemo","renderPanel","__assign","closePanel","openPanel","onOpen","PANEL_STACK2_VIEW","showHeader","PANEL_STACK2_HEADER","HEADING","ellipsize","displayName","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/panel-stack2/panelView2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\nimport { Panel, PanelProps } from \"./panelTypes\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelView2Props<T extends Panel<object>> {\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen: (addedPanel: T) => void;\n\n    /** The panel to be displayed. */\n    panel: T;\n\n    /** The previous panel in the stack, for rendering the \"back\" button. */\n    previousPanel?: T;\n\n    /** Whether to show the header with the \"back\" button. */\n    showHeader: boolean;\n}\n\ninterface PanelView2Component {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelView2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelView2: PanelView2Component = <T extends Panel<object>>(props: PanelView2Props<T>) => {\n    const handleClose = React.useCallback(() => props.onClose(props.panel), [props.onClose, props.panel]);\n\n    const maybeBackButton =\n        props.previousPanel === undefined ? null : (\n            <Button\n                aria-label=\"Back\"\n                className={Classes.PANEL_STACK_HEADER_BACK}\n                icon=\"chevron-left\"\n                minimal={true}\n                onClick={handleClose}\n                small={true}\n                text={props.previousPanel.title}\n                title={props.previousPanel.htmlTitle}\n            />\n        );\n\n    // `props.panel.renderPanel` is simply a function that returns a JSX.Element. It may be an FC which\n    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n    // those hooks with their own lifecycle through a very simple wrapper component.\n    const PanelWrapper: React.FC = React.useMemo(\n        () => () =>\n            // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n            // instantiated with a type unrelated to our generic constraint `T` here. We know\n            // we're sending the right values here though, and it makes the consumer API for this\n            // component type safe, so it's ok to do this...\n            props.panel.renderPanel({\n                closePanel: handleClose,\n                openPanel: props.onOpen,\n                ...props.panel.props,\n            } as PanelProps<T>),\n        [props.panel, props.onOpen],\n    );\n\n    return (\n        <div className={Classes.PANEL_STACK2_VIEW}>\n            {props.showHeader && (\n                <div className={Classes.PANEL_STACK2_HEADER}>\n                    {/* two <span> tags here ensure title is centered as long as possible, with `flex: 1` styling */}\n                    <span>{maybeBackButton}</span>\n                    <Text className={Classes.HEADING} ellipsize={true} title={props.panel.htmlTitle}>\n                        {props.panel.title}\n                    </Text>\n                    <span />\n                </div>\n            )}\n            <PanelWrapper />\n        </div>\n    );\n};\nPanelView2.displayName = `${DISPLAYNAME_PREFIX}.PanelView2`;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,cAAc;AAC1D,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,IAAI,QAAQ,cAAc;AAiCnC;AACA,OAAO,IAAMC,UAAU,GAAwB,SAAAA,CAA0BC,KAAyB;EAC9F,IAAMC,WAAW,GAAGP,KAAK,CAACQ,WAAW,CAAC;IAAM,OAAAF,KAAK,CAACG,OAAO,CAACH,KAAK,CAACI,KAAK,CAAC;EAA1B,CAA0B,EAAE,CAACJ,KAAK,CAACG,OAAO,EAAEH,KAAK,CAACI,KAAK,CAAC,CAAC;EAErG,IAAMC,eAAe,GACjBL,KAAK,CAACM,aAAa,KAAKC,SAAS,GAAG,IAAI,GACpCb,KAAA,CAAAc,aAAA,CAACX,MAAM;IAAA,cACQ,MAAM;IACjBY,SAAS,EAAEd,OAAO,CAACe,uBAAuB;IAC1CC,IAAI,EAAC,cAAc;IACnBC,OAAO,EAAE,IAAI;IACbC,OAAO,EAAEZ,WAAW;IACpBa,KAAK,EAAE,IAAI;IACXC,IAAI,EAAEf,KAAK,CAACM,aAAa,CAACU,KAAK;IAC/BA,KAAK,EAAEhB,KAAK,CAACM,aAAa,CAACW;EAAS,EAE3C;EAEL;EACA;EACA;EACA,IAAMC,YAAY,GAAaxB,KAAK,CAACyB,OAAO,CACxC;IAAM;MACF;MACA;MACA;MACA;MACA,OAAAnB,KAAK,CAACI,KAAK,CAACgB,WAAW,CAACC,QAAA;QACpBC,UAAU,EAAErB,WAAW;QACvBsB,SAAS,EAAEvB,KAAK,CAACwB;MAAM,GACpBxB,KAAK,CAACI,KAAK,CAACJ,KAAK,CACN,CAAC;IAJnB,CAImB;EATjB,CASiB,EACvB,CAACA,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACwB,MAAM,CAAC,CAC9B;EAED,OACI9B,KAAA,CAAAc,aAAA;IAAKC,SAAS,EAAEd,OAAO,CAAC8B;EAAiB,GACpCzB,KAAK,CAAC0B,UAAU,IACbhC,KAAA,CAAAc,aAAA;IAAKC,SAAS,EAAEd,OAAO,CAACgC;EAAmB,GAEvCjC,KAAA,CAAAc,aAAA,eAAOH,eAAe,CAAQ,EAC9BX,KAAA,CAAAc,aAAA,CAACV,IAAI;IAACW,SAAS,EAAEd,OAAO,CAACiC,OAAO;IAAEC,SAAS,EAAE,IAAI;IAAEb,KAAK,EAAEhB,KAAK,CAACI,KAAK,CAACa;EAAS,GAC1EjB,KAAK,CAACI,KAAK,CAACY,KAAK,CACf,EACPtB,KAAA,CAAAc,aAAA,cAAQ,CAEf,EACDd,KAAA,CAAAc,aAAA,CAACU,YAAY,OAAG,CACd;AAEd,CAAC;AACDnB,UAAU,CAAC+B,WAAW,GAAG,GAAAC,MAAA,CAAGnC,kBAAkB,gBAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}