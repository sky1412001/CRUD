{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA, arrB, compare) {\n  if (compare === void 0) {\n    compare = function (a, b) {\n      return a === b;\n    };\n  }\n  // treat `null` and `undefined` as the same\n  if (arrA == null && arrB == null) {\n    return true;\n  } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n    return false;\n  } else {\n    return arrA.every(function (a, i) {\n      return compare(a, arrB[i]);\n    });\n  }\n}\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function shallowCompareKeys(objA, objB, keys) {\n  // treat `null` and `undefined` as the same\n  if (objA == null && objB == null) {\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return false;\n  } else if (keys != null) {\n    return shallowCompareKeysImpl(objA, objB, keys);\n  } else {\n    // shallowly compare all keys from both objects\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    return shallowCompareKeysImpl(objA, objB, {\n      include: keysA\n    }) && shallowCompareKeysImpl(objA, objB, {\n      include: keysB\n    });\n  }\n}\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function deepCompareKeys(objA, objB, keys) {\n  if (objA === objB) {\n    return true;\n  } else if (objA == null && objB == null) {\n    // treat `null` and `undefined` as the same\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return arraysEqual(objA, objB, deepCompareKeys);\n  } else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n    return objA === objB;\n  } else if (keys != null) {\n    return deepCompareKeysImpl(objA, objB, keys);\n  } else if (objA.constructor !== objB.constructor) {\n    return false;\n  } else {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    if (keysA == null || keysB == null) {\n      return false;\n    }\n    if (keysA.length === 0 && keysB.length === 0) {\n      return true;\n    }\n    return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n  }\n}\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues(objA, objB, keys) {\n  if (objA === void 0) {\n    objA = {};\n  }\n  if (objB === void 0) {\n    objB = {};\n  }\n  var filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n  return getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\n    return deepCompareKeys(a, b, [key]);\n  });\n}\n// Private helpers\n// ===============\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction shallowCompareKeysImpl(objA, objB, keys) {\n  return filterKeys(objA, objB, keys).every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n  });\n}\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction deepCompareKeysImpl(objA, objB, keys) {\n  return keys.every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n  });\n}\nfunction isSimplePrimitiveType(value) {\n  return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\nfunction filterKeys(objA, objB, keys) {\n  if (isAllowlist(keys)) {\n    return keys.include;\n  } else if (isDenylist(keys)) {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    // merge keys from both objects into a big set for quick access\n    var keySet_1 = arrayToObject(keysA.concat(keysB));\n    // delete denied keys from the key set\n    keys.exclude.forEach(function (key) {\n      return delete keySet_1[key];\n    });\n    // return the remaining keys as an array\n    return Object.keys(keySet_1);\n  }\n  return [];\n}\nfunction isAllowlist(keys) {\n  return keys != null && keys.include != null;\n}\nfunction isDenylist(keys) {\n  return keys != null && keys.exclude != null;\n}\nfunction arrayToObject(arr) {\n  return arr.reduce(function (obj, element) {\n    obj[element] = true;\n    return obj;\n  }, {});\n}\nfunction getUnequalKeyValues(objA, objB, keys, compareFn) {\n  var unequalKeys = keys.filter(function (key) {\n    return !compareFn(objA, objB, key);\n  });\n  var unequalKeyValues = unequalKeys.map(function (key) {\n    return {\n      key: key,\n      valueA: objA[key],\n      valueB: objB[key]\n    };\n  });\n  return unequalKeyValues;\n}\nfunction unionKeys(objA, objB) {\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  var concatKeys = keysA.concat(keysB);\n  var keySet = arrayToObject(concatKeys);\n  return Object.keys(keySet);\n}","map":{"version":3,"names":["arraysEqual","arrA","arrB","compare","a","b","length","every","i","shallowCompareKeys","objA","objB","keys","Array","isArray","shallowCompareKeysImpl","keysA","Object","keysB","include","deepCompareKeys","isSimplePrimitiveType","deepCompareKeysImpl","constructor","getDeepUnequalKeyValues","filteredKeys","unionKeys","getUnequalKeyValues","key","filterKeys","hasOwnProperty","value","isAllowlist","isDenylist","keySet_1","arrayToObject","concat","exclude","forEach","arr","reduce","obj","element","compareFn","unequalKeys","filter","unequalKeyValues","map","valueA","valueB","concatKeys","keySet"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/common/utils/compareUtils.ts"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// we use the empty object {} a lot in this public API\n/* eslint-disable @typescript-eslint/ban-types */\n\nexport interface KeyAllowlist<T> {\n    include: Array<keyof T>;\n}\n\nexport interface KeyDenylist<T> {\n    exclude: Array<keyof T>;\n}\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    } else {\n        return arrA.every((a, i) => compare(a, arrB[i]));\n    }\n}\n\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function shallowCompareKeys<T extends {}>(\n    objA: T | null | undefined,\n    objB: T | null | undefined,\n    keys?: KeyDenylist<T> | KeyAllowlist<T>,\n) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    } else if (keys != null) {\n        return shallowCompareKeysImpl(objA, objB, keys);\n    } else {\n        // shallowly compare all keys from both objects\n        const keysA = Object.keys(objA) as Array<keyof T>;\n        const keysB = Object.keys(objB) as Array<keyof T>;\n        return (\n            shallowCompareKeysImpl(objA, objB, { include: keysA }) &&\n            shallowCompareKeysImpl(objA, objB, { include: keysB })\n        );\n    }\n}\n\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function deepCompareKeys(objA: any, objB: any, keys?: Array<string | number | symbol>): boolean {\n    if (objA === objB) {\n        return true;\n    } else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    } else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    } else if (keys != null) {\n        return deepCompareKeysImpl(objA, objB, keys);\n    } else if (objA.constructor !== objB.constructor) {\n        return false;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n    }\n}\n\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues<T extends {}>(\n    objA: T = {} as any as T,\n    objB: T = {} as any as T,\n    keys?: Array<keyof T>,\n) {\n    const filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n    return getUnequalKeyValues(objA, objB, filteredKeys, (a, b, key) => {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\n\n// Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction shallowCompareKeysImpl<T extends object>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    return filterKeys(objA, objB, keys).every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction deepCompareKeysImpl(objA: any, objB: any, keys: Array<string | number | symbol>): boolean {\n    return keys.every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\n\nfunction isSimplePrimitiveType(value: any) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction filterKeys<T extends object>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    if (isAllowlist(keys)) {\n        return keys.include;\n    } else if (isDenylist(keys)) {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n\n        // merge keys from both objects into a big set for quick access\n        const keySet = arrayToObject(keysA.concat(keysB));\n\n        // delete denied keys from the key set\n        keys.exclude.forEach(key => delete keySet[key]);\n\n        // return the remaining keys as an array\n        return Object.keys(keySet) as Array<keyof T>;\n    }\n\n    return [];\n}\n\nfunction isAllowlist<T>(keys: any): keys is KeyAllowlist<T> {\n    return keys != null && (keys as KeyAllowlist<T>).include != null;\n}\n\nfunction isDenylist<T>(keys: any): keys is KeyDenylist<T> {\n    return keys != null && (keys as KeyDenylist<T>).exclude != null;\n}\n\nfunction arrayToObject(arr: any[]) {\n    return arr.reduce((obj: any, element: any) => {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\n\nfunction getUnequalKeyValues<T extends {}>(\n    objA: T,\n    objB: T,\n    keys: Array<keyof T>,\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\n) {\n    const unequalKeys = keys.filter(key => !compareFn(objA, objB, key));\n    const unequalKeyValues = unequalKeys.map(key => ({\n        key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }));\n    return unequalKeyValues;\n}\n\nfunction unionKeys<T extends {}>(objA: T, objB: T) {\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const concatKeys = keysA.concat(keysB);\n    const keySet = arrayToObject(concatKeys);\n\n    return Object.keys(keySet) as Array<keyof T>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}