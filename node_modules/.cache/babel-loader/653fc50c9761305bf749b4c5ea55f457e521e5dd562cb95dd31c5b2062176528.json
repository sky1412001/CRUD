{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport { placements } from \"@popperjs/core\";\nimport { Position } from \"../../common\";\nexport var PopoverPosition = __assign(__assign({}, Position), {\n  AUTO: \"auto\",\n  AUTO_END: \"auto-end\",\n  AUTO_START: \"auto-start\"\n});\nexport { placements as PopperPlacements };","map":{"version":3,"names":["placements","Position","PopoverPosition","__assign","AUTO","AUTO_END","AUTO_START","PopperPlacements"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/popover/popoverSharedProps.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Boundary, Modifier, Placement, placements, RootBoundary, StrictModifiers } from \"@popperjs/core\";\nimport * as React from \"react\";\nimport { StrictModifier } from \"react-popper\";\n\nimport { Position, Props } from \"../../common\";\nimport { OverlayableProps } from \"../overlay/overlay\";\n\nexport const PopoverPosition = {\n    ...Position,\n    AUTO: \"auto\" as \"auto\",\n    AUTO_END: \"auto-end\" as \"auto-end\",\n    AUTO_START: \"auto-start\" as \"auto-start\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type PopoverPosition = (typeof PopoverPosition)[keyof typeof PopoverPosition];\n\nexport { Boundary as PopperBoundary, Placement, placements as PopperPlacements };\n// copied from @popperjs/core, where it is not exported as public\nexport type StrictModifierNames = NonNullable<StrictModifiers[\"name\"]>;\n\n/**\n * Configuration object for customizing popper.js v2 modifiers in Popover and Tooltip.\n *\n * @see https://popper.js.org/docs/v2/modifiers/\n */\nexport type PopperModifierOverrides = Partial<{\n    [M in StrictModifierNames]: Partial<Omit<StrictModifier<M>, \"name\">>;\n}>;\n\n/**\n * Custom popper.js v2 modifier for Popover and Tooltip.\n *\n * @see https://popper.js.org/docs/v2/modifiers/#custom-modifiers\n */\nexport type PopperCustomModifier = Partial<Modifier<any, object>>;\n\n/**\n * Default props interface for the Popover target element.\n *\n * These props are applied to the generated target element (whose tag name is customizable via `targetTagName`)\n * or, when the `renderTarget` API is used, sent as props to that render function.\n *\n * This interface is generic enough to be compatible with the various HTML attributes Popover needs in\n * order to function properly, including things like event handlers and ARIA accessibility attributes.\n */\nexport type DefaultPopoverTargetHTMLProps = React.HTMLProps<HTMLElement>;\n\n/**\n * Properties injected by Popover when rendering custom targets via the `renderTarget` API.\n *\n * @see https://blueprintjs.com/docs/#core/components/popover.structure\n */\nexport interface PopoverTargetProps\n    extends Pick<React.HTMLAttributes<HTMLElement>, \"aria-haspopup\" | \"className\" | \"tabIndex\"> {\n    /** Target ref. */\n    ref: React.Ref<any>;\n\n    /** Whether the popover or tooltip is currently open. */\n    isOpen: boolean;\n}\n\n/**\n * Event handlers injected by Popover for hover interaction popovers.\n */\nexport type PopoverHoverTargetHandlers<TProps extends DefaultPopoverTargetHTMLProps = DefaultPopoverTargetHTMLProps> =\n    Pick<TProps, \"onBlur\" | \"onContextMenu\" | \"onFocus\" | \"onMouseEnter\" | \"onMouseLeave\">;\n\n/**\n * Event handlers injected by Popover for click interaction popovers.\n */\nexport type PopoverClickTargetHandlers<TProps extends DefaultPopoverTargetHTMLProps = DefaultPopoverTargetHTMLProps> =\n    Pick<TProps, \"onClick\" | \"onKeyDown\">;\n\n/**\n * Props shared between `Popover` and `Tooltip`.\n *\n * @template TProps HTML props interface for target element,\n *                  defaults to props for HTMLElement in IPopoverProps and ITooltipProps\n */\nexport interface PopoverSharedProps<TProps extends DefaultPopoverTargetHTMLProps> extends OverlayableProps, Props {\n    /** Interactive element which will trigger the popover. */\n    children?: React.ReactNode;\n\n    /**\n     * A boundary element supplied to the \"flip\" and \"preventOverflow\" modifiers.\n     * This is a shorthand for overriding Popper.js modifier options with the `modifiers` prop.\n     *\n     * @see https://popper.js.org/docs/v2/utils/detect-overflow/#boundary\n     */\n    boundary?: Boundary;\n\n    /**\n     * When enabled, clicks inside a `Classes.POPOVER_DISMISS` element\n     * will only close the current popover and not outer popovers.\n     * When disabled, the current popover and any ancestor popovers will be closed.\n     *\n     * @see http://blueprintjs.com/docs/#core/components/popover.closing-on-click\n     * @default false\n     */\n    captureDismiss?: boolean;\n\n    /**\n     * Initial opened state when uncontrolled.\n     *\n     * @default false\n     */\n    defaultIsOpen?: boolean;\n\n    /**\n     * Prevents the popover from appearing when `true`.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the wrapper and target should take up the full width of their container.\n     * Note that supplying `true` for this prop will force  `targetTagName=\"div\"`.\n     */\n    fill?: boolean;\n\n    /**\n     * The amount of time in milliseconds the popover should remain open after\n     * the user hovers off the trigger. The timer is canceled if the user mouses\n     * over the target before it expires.\n     *\n     * @default 300\n     */\n    hoverCloseDelay?: number;\n\n    /**\n     * The amount of time in milliseconds the popover should wait before opening\n     * after the user hovers over the trigger. The timer is canceled if the user\n     * mouses away from the target before it expires.\n     *\n     * @default 150\n     */\n    hoverOpenDelay?: number;\n\n    /**\n     * Whether a popover that uses a `Portal` should automatically inherit the\n     * dark theme from its parent.\n     *\n     * @default true\n     */\n    inheritDarkTheme?: boolean;\n\n    /**\n     * Whether the popover is visible. Passing this prop puts the popover in\n     * controlled mode, where the only way to change visibility is by updating\n     * this property. If `disabled={true}`, this prop will be ignored, and the\n     * popover will remain closed.\n     *\n     * @default undefined\n     */\n    isOpen?: boolean;\n\n    /**\n     * Whether the popover content should be sized to match the width of the target.\n     * This is sometimes useful for dropdown menus. This prop is implemented using\n     * a Popper.js custom modifier.\n     *\n     * @default false\n     */\n    matchTargetWidth?: boolean;\n\n    /**\n     * Whether to apply minimal styling to this popover or tooltip. Minimal popovers\n     * do not have an arrow pointing to their target and use a subtler animation.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n\n    /**\n     * Overrides for Popper.js built-in modifiers.\n     * Each override is is a full modifier object (omitting its name), keyed by its modifier name.\n     *\n     * For example, the arrow modifier can be disabled by providing `{ arrow: { enabled: false } }`.\n     *\n     * Some of Popover's default modifiers may get disabled under certain circumstances, but you may\n     * choose to re-enable and customize them. For example, \"offset\" is disabled when `minimal={true}`,\n     * but you can re-enable it with `{ offset: { enabled: true } }`.\n     *\n     * @see https://popper.js.org/docs/v2/modifiers/\n     */\n    modifiers?: PopperModifierOverrides;\n\n    /**\n     * Custom modifiers to add to the popper instance.\n     *\n     * @see https://popper.js.org/docs/v2/modifiers/#custom-modifiers\n     */\n    modifiersCustom?: readonly PopperCustomModifier[];\n\n    /**\n     * Callback invoked in controlled mode when the popover open state *would*\n     * change due to user interaction.\n     */\n    onInteraction?: (nextOpenState: boolean, e?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Whether the popover should open when its target is focused. If `true`,\n     * target will render with `tabindex=\"0\"` to make it focusable via keyboard\n     * navigation.\n     *\n     * Note that this functionality is only enabled for hover interaction\n     * popovers/tooltips.\n     *\n     * @default true\n     */\n    openOnTargetFocus?: boolean;\n\n    /**\n     * Ref supplied to the `Classes.POPOVER` element.\n     */\n    popoverRef?: React.Ref<HTMLElement>;\n\n    /**\n     * Target renderer which receives props injected by Popover which should be spread onto\n     * the rendered element. This function should return a single React node.\n     *\n     * Mutually exclusive with `children` and `targetTagName` props.\n     */\n    renderTarget?: (\n        // N.B. we would like to discriminate between \"hover\" and \"click\" popovers here, so that we can be clear\n        // about exactly which event handlers are passed here to be rendered on the target element, but unfortunately\n        // we can't do that without breaking backwards-compatibility in the renderTarget API. Besides, that kind of\n        // improvement would be better implemented if we added another type param to Popover, something like\n        // Popover<TProps, \"click\" | \"hover\">. Instead of discriminating, we union the different possible event handlers\n        // that may be passed (they are all optional properties anyway).\n        props: PopoverTargetProps & PopoverHoverTargetHandlers<TProps> & PopoverClickTargetHandlers<TProps>,\n    ) => JSX.Element;\n\n    /**\n     * A root boundary element supplied to the \"flip\" and \"preventOverflow\" modifiers.\n     * This is a shorthand for overriding Popper.js modifier options with the `modifiers` prop.\n     *\n     * @see https://popper.js.org/docs/v2/utils/detect-overflow/#rootboundary\n     */\n    rootBoundary?: RootBoundary;\n\n    /**\n     * The placement (relative to the target) at which the popover should appear.\n     * Mutually exclusive with `position` prop. Prefer using this over `position`,\n     * as it more closely aligns with Popper.js semantics.\n     *\n     * The default value of `\"auto\"` will choose the best placement when opened\n     * and will allow the popover to reposition itself to remain onscreen as the\n     * user scrolls around.\n     *\n     * @default \"auto\"\n     */\n    placement?: Placement;\n\n    /**\n     * A space-delimited string of class names applied to the popover element.\n     */\n    popoverClassName?: string;\n\n    /**\n     * The position (relative to the target) at which the popover should appear.\n     * Mutually exclusive with `placement` prop.\n     *\n     * The default value of `\"auto\"` will choose the best position when opened\n     * and will allow the popover to reposition itself to remain onscreen as the\n     * user scrolls around.\n     *\n     * @default \"auto\"\n     */\n    position?: PopoverPosition;\n\n    /**\n     * HTML tag name for the target element. This must be an HTML element to\n     * ensure that it supports the necessary DOM event handlers.\n     *\n     * By default, a `<span>` tag is used so popovers appear as inline-block\n     * elements and can be nested in text. Use `<div>` tag for a block element.\n     *\n     * If `fill` is set to `true`, this prop's default value will become `\"div\"`\n     * instead of `\"span\"`.\n     *\n     * Note that _not all HTML tags are supported_; you will need to make sure\n     * the tag you choose supports the HTML attributes Popover applies to the\n     * target element.\n     *\n     * This prop is mutually exclusive with the `renderTarget` API.\n     *\n     * @default \"span\" (\"div\" if `fill={true}`)\n     */\n    targetTagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * HTML props for the target element. This is useful in some cases where you\n     * need to render some simple attributes on the generated target element.\n     *\n     * For more complex use cases, consider using the `renderTarget` API instead.\n     * This prop will be ignored if `renderTarget` is used.\n     */\n    targetProps?: TProps;\n\n    /**\n     * Whether the popover should be rendered inside a `Portal` attached to\n     * `portalContainer` prop.\n     *\n     * Rendering content inside a `Portal` allows the popover content to escape\n     * the physical bounds of its parent while still being positioned correctly\n     * relative to its target. Using a `Portal` is necessary if any ancestor of\n     * the target hides overflow or uses very complex positioning.\n     *\n     * Not using a `Portal` can result in smoother performance when scrolling\n     * and allows the popover content to inherit CSS styles from surrounding\n     * elements, but it remains subject to the overflow bounds of its ancestors.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAwCA,UAAU,QAAuC,gBAAgB;AAIzG,SAASC,QAAQ,QAAe,cAAc;AAG9C,OAAO,IAAMC,eAAe,GAAAC,QAAA,CAAAA,QAAA,KACrBF,QAAQ;EACXG,IAAI,EAAE,MAAgB;EACtBC,QAAQ,EAAE,UAAwB;EAClCC,UAAU,EAAE;AAA4B,EAC3C;AAID,SAAgDN,UAAU,IAAIO,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}