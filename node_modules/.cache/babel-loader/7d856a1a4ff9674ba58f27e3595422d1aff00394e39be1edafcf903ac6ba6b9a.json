{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { HOTKEYS_PROVIDER_NOT_FOUND } from \"../../common/errors\";\nimport { elementIsTextInput } from \"../../common/utils/domUtils\";\nimport { comboMatches, getKeyCombo, parseKeyCombo } from \"../../components/hotkeys/hotkeyParser\";\nimport { HotkeysContext } from \"../../context\";\n/**\n * React hook to register global and local hotkeys for a component.\n *\n * @see https://blueprintjs.com/docs/#core/hooks/use-hotkeys\n * @param keys list of hotkeys to configure\n * @param options hook options\n */\nexport function useHotkeys(keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.document,\n    document = _a === void 0 ? getDefaultDocument() : _a,\n    _b = options.showDialogKeyCombo,\n    showDialogKeyCombo = _b === void 0 ? \"?\" : _b;\n  var localKeys = React.useMemo(function () {\n    return keys.filter(function (k) {\n      return !k.global;\n    }).map(function (k) {\n      return {\n        combo: parseKeyCombo(k.combo),\n        config: k\n      };\n    });\n  }, [keys]);\n  var globalKeys = React.useMemo(function () {\n    return keys.filter(function (k) {\n      return k.global;\n    }).map(function (k) {\n      return {\n        combo: parseKeyCombo(k.combo),\n        config: k\n      };\n    });\n  }, [keys]);\n  // register keys with global context\n  var _c = React.useContext(HotkeysContext),\n    state = _c[0],\n    dispatch = _c[1];\n  React.useEffect(function () {\n    if (!state.hasProvider) {\n      console.warn(HOTKEYS_PROVIDER_NOT_FOUND);\n    }\n  }, [state.hasProvider]);\n  // we can still bind the hotkeys if there is no HotkeysProvider, they just won't show up in the dialog\n  React.useEffect(function () {\n    var payload = __spreadArray(__spreadArray([], globalKeys.map(function (k) {\n      return k.config;\n    }), true), localKeys.map(function (k) {\n      return k.config;\n    }), true);\n    dispatch({\n      type: \"ADD_HOTKEYS\",\n      payload: payload\n    });\n    return function () {\n      return dispatch({\n        type: \"REMOVE_HOTKEYS\",\n        payload: payload\n      });\n    };\n  }, [dispatch, globalKeys, localKeys]);\n  var invokeNamedCallbackIfComboRecognized = React.useCallback(function (global, combo, callbackName, e) {\n    var _a, _b;\n    var isTextInput = elementIsTextInput(e.target);\n    for (var _i = 0, _c = global ? globalKeys : localKeys; _i < _c.length; _i++) {\n      var key = _c[_i];\n      var _d = key.config,\n        _e = _d.allowInInput,\n        allowInInput = _e === void 0 ? false : _e,\n        _f = _d.disabled,\n        disabled = _f === void 0 ? false : _f,\n        _g = _d.preventDefault,\n        preventDefault = _g === void 0 ? false : _g,\n        _h = _d.stopPropagation,\n        stopPropagation = _h === void 0 ? false : _h;\n      var shouldIgnore = isTextInput && !allowInInput || disabled;\n      if (!shouldIgnore && comboMatches(key.combo, combo)) {\n        if (preventDefault) {\n          e.preventDefault();\n        }\n        if (stopPropagation) {\n          // set a flag just for unit testing. not meant to be referenced in feature work.\n          e.isPropagationStopped = true;\n          e.stopPropagation();\n        }\n        (_b = (_a = key.config)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n      }\n    }\n  }, [globalKeys, localKeys]);\n  var handleGlobalKeyDown = React.useCallback(function (e) {\n    // special case for global keydown: if '?' is pressed, open the hotkeys dialog\n    var combo = getKeyCombo(e);\n    var isTextInput = elementIsTextInput(e.target);\n    if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {\n      dispatch({\n        type: \"OPEN_DIALOG\"\n      });\n    } else {\n      invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyDown\", e);\n    }\n  }, [dispatch, invokeNamedCallbackIfComboRecognized, showDialogKeyCombo]);\n  var handleGlobalKeyUp = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyUp\", e);\n  }, [invokeNamedCallbackIfComboRecognized]);\n  var handleLocalKeyDown = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyDown\", e.nativeEvent);\n  }, [invokeNamedCallbackIfComboRecognized]);\n  var handleLocalKeyUp = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyUp\", e.nativeEvent);\n  }, [invokeNamedCallbackIfComboRecognized]);\n  React.useEffect(function () {\n    // document is guaranteed to be defined inside effects\n    document.addEventListener(\"keydown\", handleGlobalKeyDown);\n    document.addEventListener(\"keyup\", handleGlobalKeyUp);\n    return function () {\n      document.removeEventListener(\"keydown\", handleGlobalKeyDown);\n      document.removeEventListener(\"keyup\", handleGlobalKeyUp);\n    };\n  }, [handleGlobalKeyDown, handleGlobalKeyUp]);\n  return {\n    handleKeyDown: handleLocalKeyDown,\n    handleKeyUp: handleLocalKeyUp\n  };\n}\nfunction getDefaultDocument() {\n  if (typeof window === \"undefined\") {\n    return undefined;\n  }\n  return window.document;\n}","map":{"version":3,"names":["React","HOTKEYS_PROVIDER_NOT_FOUND","elementIsTextInput","comboMatches","getKeyCombo","parseKeyCombo","HotkeysContext","useHotkeys","keys","options","_a","document","getDefaultDocument","_b","showDialogKeyCombo","localKeys","useMemo","filter","k","global","map","combo","config","globalKeys","_c","useContext","state","dispatch","useEffect","hasProvider","console","warn","payload","__spreadArray","type","invokeNamedCallbackIfComboRecognized","useCallback","callbackName","e","isTextInput","target","_i","length","key","_d","_e","allowInInput","_f","disabled","_g","preventDefault","_h","stopPropagation","shouldIgnore","isPropagationStopped","call","handleGlobalKeyDown","handleGlobalKeyUp","handleLocalKeyDown","nativeEvent","handleLocalKeyUp","addEventListener","removeEventListener","handleKeyDown","handleKeyUp","window","undefined"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/hooks/hotkeys/useHotkeys.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { HOTKEYS_PROVIDER_NOT_FOUND } from \"../../common/errors\";\nimport { elementIsTextInput } from \"../../common/utils/domUtils\";\nimport { comboMatches, getKeyCombo, KeyCombo, parseKeyCombo } from \"../../components/hotkeys/hotkeyParser\";\nimport { HotkeysContext } from \"../../context\";\nimport { HotkeyConfig } from \"./hotkeyConfig\";\n\nexport interface UseHotkeysOptions {\n    /**\n     * A custom document to reference when binding global event handlers.\n     * This can be useful when using iframes in an application.\n     *\n     * @default window.document\n     */\n    document?: Document;\n\n    /**\n     * The key combo which will trigger the hotkeys dialog to open.\n     *\n     * @default \"?\"\n     */\n    showDialogKeyCombo?: string;\n}\n\nexport interface UseHotkeysReturnValue {\n    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;\n}\n\n/**\n * React hook to register global and local hotkeys for a component.\n *\n * @see https://blueprintjs.com/docs/#core/hooks/use-hotkeys\n * @param keys list of hotkeys to configure\n * @param options hook options\n */\nexport function useHotkeys(keys: readonly HotkeyConfig[], options: UseHotkeysOptions = {}): UseHotkeysReturnValue {\n    const { document = getDefaultDocument(), showDialogKeyCombo = \"?\" } = options;\n    const localKeys = React.useMemo(\n        () =>\n            keys\n                .filter(k => !k.global)\n                .map(k => ({\n                    combo: parseKeyCombo(k.combo),\n                    config: k,\n                })),\n        [keys],\n    );\n    const globalKeys = React.useMemo(\n        () =>\n            keys\n                .filter(k => k.global)\n                .map(k => ({\n                    combo: parseKeyCombo(k.combo),\n                    config: k,\n                })),\n        [keys],\n    );\n\n    // register keys with global context\n    const [state, dispatch] = React.useContext(HotkeysContext);\n\n    React.useEffect(() => {\n        if (!state.hasProvider) {\n            console.warn(HOTKEYS_PROVIDER_NOT_FOUND);\n        }\n    }, [state.hasProvider]);\n\n    // we can still bind the hotkeys if there is no HotkeysProvider, they just won't show up in the dialog\n    React.useEffect(() => {\n        const payload = [...globalKeys.map(k => k.config), ...localKeys.map(k => k.config)];\n        dispatch({ type: \"ADD_HOTKEYS\", payload });\n        return () => dispatch({ type: \"REMOVE_HOTKEYS\", payload });\n    }, [dispatch, globalKeys, localKeys]);\n\n    const invokeNamedCallbackIfComboRecognized = React.useCallback(\n        (global: boolean, combo: KeyCombo, callbackName: \"onKeyDown\" | \"onKeyUp\", e: KeyboardEvent) => {\n            const isTextInput = elementIsTextInput(e.target as HTMLElement);\n            for (const key of global ? globalKeys : localKeys) {\n                const {\n                    allowInInput = false,\n                    disabled = false,\n                    preventDefault = false,\n                    stopPropagation = false,\n                } = key.config;\n                const shouldIgnore = (isTextInput && !allowInInput) || disabled;\n                if (!shouldIgnore && comboMatches(key.combo, combo)) {\n                    if (preventDefault) {\n                        e.preventDefault();\n                    }\n                    if (stopPropagation) {\n                        // set a flag just for unit testing. not meant to be referenced in feature work.\n                        (e as any).isPropagationStopped = true;\n                        e.stopPropagation();\n                    }\n                    key.config[callbackName]?.(e);\n                }\n            }\n        },\n        [globalKeys, localKeys],\n    );\n\n    const handleGlobalKeyDown = React.useCallback(\n        (e: KeyboardEvent) => {\n            // special case for global keydown: if '?' is pressed, open the hotkeys dialog\n            const combo = getKeyCombo(e);\n            const isTextInput = elementIsTextInput(e.target as HTMLElement);\n            if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {\n                dispatch({ type: \"OPEN_DIALOG\" });\n            } else {\n                invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyDown\", e);\n            }\n        },\n        [dispatch, invokeNamedCallbackIfComboRecognized, showDialogKeyCombo],\n    );\n    const handleGlobalKeyUp = React.useCallback(\n        (e: KeyboardEvent) => invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyUp\", e),\n        [invokeNamedCallbackIfComboRecognized],\n    );\n\n    const handleLocalKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLElement>) =>\n            invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyDown\", e.nativeEvent),\n        [invokeNamedCallbackIfComboRecognized],\n    );\n    const handleLocalKeyUp = React.useCallback(\n        (e: React.KeyboardEvent<HTMLElement>) =>\n            invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyUp\", e.nativeEvent),\n        [invokeNamedCallbackIfComboRecognized],\n    );\n\n    React.useEffect(() => {\n        // document is guaranteed to be defined inside effects\n        document!.addEventListener(\"keydown\", handleGlobalKeyDown);\n        document!.addEventListener(\"keyup\", handleGlobalKeyUp);\n        return () => {\n            document!.removeEventListener(\"keydown\", handleGlobalKeyDown);\n            document!.removeEventListener(\"keyup\", handleGlobalKeyUp);\n        };\n    }, [handleGlobalKeyDown, handleGlobalKeyUp]);\n\n    return { handleKeyDown: handleLocalKeyDown, handleKeyUp: handleLocalKeyUp };\n}\n\nfunction getDefaultDocument(): Document | undefined {\n    if (typeof window === \"undefined\") {\n        return undefined;\n    }\n    return window.document;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}