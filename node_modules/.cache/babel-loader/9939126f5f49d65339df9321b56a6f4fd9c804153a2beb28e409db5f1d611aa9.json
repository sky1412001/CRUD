{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isRefObject(value) {\n  return value != null && typeof value !== \"function\";\n}\nexport function isRefCallback(value) {\n  return typeof value === \"function\";\n}\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\nexport function setRef(refTarget, ref) {\n  if (isRefObject(refTarget)) {\n    // HACKHACK: .current property is readonly\n    refTarget.current = ref;\n  } else if (isRefCallback(refTarget)) {\n    refTarget(ref);\n  }\n}\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\nexport function mergeRefs() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  return function (value) {\n    refs.forEach(function (ref) {\n      setRef(ref, value);\n    });\n  };\n}\nexport function getRef(ref) {\n  var _a;\n  if (ref === null) {\n    return null;\n  }\n  return (_a = ref.current) !== null && _a !== void 0 ? _a : ref;\n}\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\nexport function refHandler(refTargetParent, refTargetKey, refProp) {\n  return function (ref) {\n    refTargetParent[refTargetKey] = ref;\n    setRef(refProp, ref);\n  };\n}","map":{"version":3,"names":["isRefObject","value","isRefCallback","setRef","refTarget","ref","current","mergeRefs","refs","_i","arguments","length","forEach","getRef","_a","refHandler","refTargetParent","refTargetKey","refProp"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/common/refs.ts"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nexport function isRefObject<T>(value: React.Ref<T> | undefined): value is React.RefObject<T> {\n    return value != null && typeof value !== \"function\";\n}\n\nexport function isRefCallback<T>(value: React.Ref<T> | undefined): value is React.RefCallback<T> {\n    return typeof value === \"function\";\n}\n\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\nexport function setRef<T>(refTarget: React.Ref<T> | undefined, ref: T | null): void {\n    if (isRefObject<T>(refTarget)) {\n        // HACKHACK: .current property is readonly\n        (refTarget.current as any) = ref;\n    } else if (isRefCallback(refTarget)) {\n        refTarget(ref);\n    }\n}\n\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\nexport function mergeRefs<T>(...refs: Array<React.Ref<T>>): React.RefCallback<T> {\n    return value => {\n        refs.forEach(ref => {\n            setRef(ref, value);\n        });\n    };\n}\n\nexport function getRef<T>(ref: T | React.RefObject<T> | null): T | null {\n    if (ref === null) {\n        return null;\n    }\n\n    return (ref as React.RefObject<T>).current ?? (ref as T);\n}\n\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\nexport function refHandler<T extends HTMLElement, K extends string>(\n    refTargetParent: { [k in K]: T | null },\n    refTargetKey: K,\n    refProp?: React.Ref<T> | undefined,\n): React.RefCallback<T> {\n    return (ref: T | null) => {\n        refTargetParent[refTargetKey] = ref;\n        setRef(refProp, ref);\n    };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUA,WAAWA,CAAIC,KAA+B;EAC1D,OAAOA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,UAAU;AACvD;AAEA,OAAM,SAAUC,aAAaA,CAAID,KAA+B;EAC5D,OAAO,OAAOA,KAAK,KAAK,UAAU;AACtC;AAEA;;;AAGA,OAAM,SAAUE,MAAMA,CAAIC,SAAmC,EAAEC,GAAa;EACxE,IAAIL,WAAW,CAAII,SAAS,CAAC,EAAE;IAC3B;IACCA,SAAS,CAACE,OAAe,GAAGD,GAAG;GACnC,MAAM,IAAIH,aAAa,CAACE,SAAS,CAAC,EAAE;IACjCA,SAAS,CAACC,GAAG,CAAC;;AAEtB;AAEA;;;;AAIA,OAAM,SAAUE,SAASA,CAAA;EAAI,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAA4B,EAA5BA,EAAA,GAAAC,SAAA,CAAAC,MAA4B,EAA5BF,EAAA,EAA4B;IAA5BD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACzB,OAAO,UAAAR,KAAK;IACRO,IAAI,CAACI,OAAO,CAAC,UAAAP,GAAG;MACZF,MAAM,CAACE,GAAG,EAAEJ,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;AACL;AAEA,OAAM,SAAUY,MAAMA,CAAIR,GAAkC;;EACxD,IAAIA,GAAG,KAAK,IAAI,EAAE;IACd,OAAO,IAAI;;EAGf,OAAO,CAAAS,EAAA,GAACT,GAA0B,CAACC,OAAO,cAAAQ,EAAA,cAAAA,EAAA,GAAKT,GAAS;AAC5D;AAEA;;;;;;AAMA,OAAM,SAAUU,UAAUA,CACtBC,eAAuC,EACvCC,YAAe,EACfC,OAAkC;EAElC,OAAO,UAACb,GAAa;IACjBW,eAAe,CAACC,YAAY,CAAC,GAAGZ,GAAG;IACnCF,MAAM,CAACe,OAAO,EAAEb,GAAG,CAAC;EACxB,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}