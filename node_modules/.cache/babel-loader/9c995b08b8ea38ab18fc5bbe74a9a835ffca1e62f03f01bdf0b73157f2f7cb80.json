{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * Text component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text\n */\nexport var Text = function (_a) {\n  var _b;\n  var children = _a.children,\n    _c = _a.tagName,\n    tagName = _c === void 0 ? \"div\" : _c,\n    title = _a.title,\n    className = _a.className,\n    ellipsize = _a.ellipsize,\n    htmlProps = __rest(_a, [\"children\", \"tagName\", \"title\", \"className\", \"ellipsize\"]);\n  var textRef = React.useRef();\n  var _d = React.useState(\"\"),\n    textContent = _d[0],\n    setTextContent = _d[1];\n  var _e = React.useState(),\n    isContentOverflowing = _e[0],\n    setIsContentOverflowing = _e[1];\n  // try to be conservative about running this effect, since querying scrollWidth causes the browser to reflow / recalculate styles,\n  // which can be very expensive for long lists (for example, in long Menus)\n  React.useLayoutEffect(function () {\n    var _a;\n    if (((_a = textRef.current) === null || _a === void 0 ? void 0 : _a.textContent) != null) {\n      setIsContentOverflowing(ellipsize && textRef.current.scrollWidth > textRef.current.clientWidth);\n      setTextContent(textRef.current.textContent);\n    }\n  }, [textRef, children, ellipsize]);\n  return React.createElement(tagName, __assign(__assign({}, htmlProps), {\n    className: classNames((_b = {}, _b[Classes.TEXT_OVERFLOW_ELLIPSIS] = ellipsize, _b), className),\n    ref: textRef,\n    title: title !== null && title !== void 0 ? title : isContentOverflowing ? textContent : undefined\n  }), children);\n};\nText.defaultProps = {\n  ellipsize: false\n};\nText.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Text\");","map":{"version":3,"names":["classNames","React","Classes","DISPLAYNAME_PREFIX","Text","_a","children","_c","tagName","title","className","ellipsize","htmlProps","__rest","textRef","useRef","_d","useState","textContent","setTextContent","_e","isContentOverflowing","setIsContentOverflowing","useLayoutEffect","current","scrollWidth","clientWidth","createElement","__assign","_b","TEXT_OVERFLOW_ELLIPSIS","ref","undefined","defaultProps","displayName","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/text/text.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\nexport interface TextProps extends Props {\n    children?: React.ReactNode;\n\n    /**\n     * Indicates that this component should be truncated with an ellipsis if it overflows its container.\n     * The `title` attribute will also be added when content overflows to show the full text of the children on hover.\n     *\n     * @default false\n     */\n    ellipsize?: boolean;\n\n    /**\n     * HTML tag name to use for rendered element.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * HTML title of the element\n     */\n    title?: string;\n}\n\n/**\n * Text component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text\n */\nexport const Text: React.FC<TextProps & Omit<React.HTMLAttributes<HTMLElement>, \"title\">> = ({\n    children,\n    tagName = \"div\",\n    title,\n    className,\n    ellipsize,\n    ...htmlProps\n}) => {\n    const textRef = React.useRef<HTMLElement>();\n    const [textContent, setTextContent] = React.useState<string>(\"\");\n    const [isContentOverflowing, setIsContentOverflowing] = React.useState<boolean>();\n\n    // try to be conservative about running this effect, since querying scrollWidth causes the browser to reflow / recalculate styles,\n    // which can be very expensive for long lists (for example, in long Menus)\n    React.useLayoutEffect(() => {\n        if (textRef.current?.textContent != null) {\n            setIsContentOverflowing(ellipsize! && textRef.current.scrollWidth > textRef.current.clientWidth);\n            setTextContent(textRef.current.textContent);\n        }\n    }, [textRef, children, ellipsize]);\n\n    return React.createElement(\n        tagName,\n        {\n            ...htmlProps,\n            className: classNames(\n                {\n                    [Classes.TEXT_OVERFLOW_ELLIPSIS]: ellipsize,\n                },\n                className,\n            ),\n            ref: textRef,\n            title: title ?? (isContentOverflowing ? textContent : undefined),\n        },\n        children,\n    );\n};\nText.defaultProps = {\n    ellipsize: false,\n};\nText.displayName = `${DISPLAYNAME_PREFIX}.Text`;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAe,oBAAoB;AA0B9D;;;;;AAKA,OAAO,IAAMC,IAAI,GAA2E,SAAAA,CAACC,EAO5F;;EANG,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,OAAe;IAAfA,OAAO,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACfE,KAAK,GAAAJ,EAAA,CAAAI,KAAA;IACLC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IACTC,SAAS,GAAAN,EAAA,CAAAM,SAAA;IACNC,SAAS,GAAAC,MAAA,CAAAR,EAAA,EAN6E,0DAO5F,CADe;EAEZ,IAAMS,OAAO,GAAGb,KAAK,CAACc,MAAM,EAAe;EACrC,IAAAC,EAAA,GAAgCf,KAAK,CAACgB,QAAQ,CAAS,EAAE,CAAC;IAAzDC,WAAW,GAAAF,EAAA;IAAEG,cAAc,GAAAH,EAAA,GAA8B;EAC1D,IAAAI,EAAA,GAAkDnB,KAAK,CAACgB,QAAQ,EAAW;IAA1EI,oBAAoB,GAAAD,EAAA;IAAEE,uBAAuB,GAAAF,EAAA,GAA6B;EAEjF;EACA;EACAnB,KAAK,CAACsB,eAAe,CAAC;;IAClB,IAAI,EAAAlB,EAAA,GAAAS,OAAO,CAACU,OAAO,cAAAnB,EAAA,uBAAAA,EAAA,CAAEa,WAAW,KAAI,IAAI,EAAE;MACtCI,uBAAuB,CAACX,SAAU,IAAIG,OAAO,CAACU,OAAO,CAACC,WAAW,GAAGX,OAAO,CAACU,OAAO,CAACE,WAAW,CAAC;MAChGP,cAAc,CAACL,OAAO,CAACU,OAAO,CAACN,WAAW,CAAC;;EAEnD,CAAC,EAAE,CAACJ,OAAO,EAAER,QAAQ,EAAEK,SAAS,CAAC,CAAC;EAElC,OAAOV,KAAK,CAAC0B,aAAa,CACtBnB,OAAO,EAAAoB,QAAA,CAAAA,QAAA,KAEAhB,SAAS;IACZF,SAAS,EAAEV,UAAU,EAAA6B,EAAA,OAEbA,EAAA,CAAC3B,OAAO,CAAC4B,sBAAsB,IAAGnB,SAAS,E,KAE/CD,SAAS,CACZ;IACDqB,GAAG,EAAEjB,OAAO;IACZL,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAKY,oBAAoB,GAAGH,WAAW,GAAGc;EAAU,IAEpE1B,QAAQ,CACX;AACL,CAAC;AACDF,IAAI,CAAC6B,YAAY,GAAG;EAChBtB,SAAS,EAAE;CACd;AACDP,IAAI,CAAC8B,WAAW,GAAG,GAAAC,MAAA,CAAGhC,kBAAkB,UAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}