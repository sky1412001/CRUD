{"ast":null,"code":"/* !\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, DISPLAYNAME_PREFIX } from \"../../common\";\n/**\n * A stateful wrapper around the low-level <input> component which works around a\n * [React bug](https://github.com/facebook/react/issues/3926). This bug is reproduced when an input\n * receives CompositionEvents (for example, through IME composition) and has its value prop updated\n * asychronously. This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n *\n * Note: this component does not apply any Blueprint-specific styling.\n */\nvar AsyncControllableInput = /** @class */function (_super) {\n  __extends(AsyncControllableInput, _super);\n  function AsyncControllableInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      hasPendingUpdate: false,\n      isComposing: false,\n      nextValue: _this.props.value,\n      value: _this.props.value\n    };\n    _this.cancelPendingCompositionEnd = null;\n    _this.handleCompositionStart = function (e) {\n      var _a, _b, _c;\n      (_a = _this.cancelPendingCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(_this);\n      _this.setState({\n        isComposing: true\n      });\n      (_c = (_b = _this.props).onCompositionStart) === null || _c === void 0 ? void 0 : _c.call(_b, e);\n    };\n    _this.handleCompositionEnd = function (e) {\n      var _a, _b;\n      // In some non-latin languages, a keystroke can end a composition event and immediately afterwards start another.\n      // This can lead to unexpected characters showing up in the text input. In order to circumvent this problem, we\n      // use a timeout which creates a delay which merges the two composition events, creating a more natural and predictable UX.\n      // `this.state.nextValue` will become \"locked\" (it cannot be overwritten by the `value` prop) until a delay (10ms) has\n      // passed without a new composition event starting.\n      _this.cancelPendingCompositionEnd = _this.setTimeout(function () {\n        return _this.setState({\n          isComposing: false\n        });\n      }, AsyncControllableInput.COMPOSITION_END_DELAY);\n      (_b = (_a = _this.props).onCompositionEnd) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleChange = function (e) {\n      var _a, _b;\n      var value = e.target.value;\n      _this.setState({\n        nextValue: value\n      });\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    return _this;\n  }\n  AsyncControllableInput.getDerivedStateFromProps = function (nextProps, nextState) {\n    if (nextState.isComposing || nextProps.value === undefined) {\n      // don't derive anything from props if:\n      // - in uncontrolled mode, OR\n      // - currently composing, since we'll do that after composition ends\n      return null;\n    }\n    var userTriggeredUpdate = nextState.nextValue !== nextState.value;\n    if (userTriggeredUpdate) {\n      if (nextProps.value === nextState.nextValue) {\n        // parent has processed and accepted our update\n        if (nextState.hasPendingUpdate) {\n          return {\n            value: nextProps.value,\n            hasPendingUpdate: false\n          };\n        } else {\n          return {\n            value: nextState.nextValue\n          };\n        }\n      } else {\n        if (nextProps.value === nextState.value) {\n          // we have sent the update to our parent, but it has not been processed yet. just wait.\n          // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n          // causing the cursor to jump once the new value is accepted\n          return {\n            hasPendingUpdate: true\n          };\n        }\n        // accept controlled update overriding user action\n        return {\n          value: nextProps.value,\n          nextValue: nextProps.value,\n          hasPendingUpdate: false\n        };\n      }\n    } else {\n      // accept controlled update, could be confirming or denying user action\n      return {\n        value: nextProps.value,\n        nextValue: nextProps.value,\n        hasPendingUpdate: false\n      };\n    }\n  };\n  AsyncControllableInput.prototype.render = function () {\n    var _a = this.state,\n      isComposing = _a.isComposing,\n      hasPendingUpdate = _a.hasPendingUpdate,\n      value = _a.value,\n      nextValue = _a.nextValue;\n    var _b = this.props,\n      inputRef = _b.inputRef,\n      restProps = __rest(_b, [\"inputRef\"]);\n    return React.createElement(\"input\", __assign({}, restProps, {\n      ref: inputRef,\n      // render the pending value even if it is not confirmed by a parent's async controlled update\n      // so that the cursor does not jump to the end of input as reported in\n      // https://github.com/palantir/blueprint/issues/4298\n      value: isComposing || hasPendingUpdate ? nextValue : value,\n      onCompositionStart: this.handleCompositionStart,\n      onCompositionEnd: this.handleCompositionEnd,\n      onChange: this.handleChange\n    }));\n  };\n  AsyncControllableInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".AsyncControllableInput\");\n  /**\n   * The amount of time (in milliseconds) which the input will wait after a compositionEnd event before\n   * unlocking its state value for external updates via props. See `handleCompositionEnd` for more details.\n   */\n  AsyncControllableInput.COMPOSITION_END_DELAY = 10;\n  return AsyncControllableInput;\n}(AbstractPureComponent);\nexport { AsyncControllableInput };","map":{"version":3,"names":["React","AbstractPureComponent","DISPLAYNAME_PREFIX","AsyncControllableInput","_super","__extends","_this","apply","arguments","state","hasPendingUpdate","isComposing","nextValue","props","value","cancelPendingCompositionEnd","handleCompositionStart","e","_a","call","setState","_c","_b","onCompositionStart","handleCompositionEnd","setTimeout","COMPOSITION_END_DELAY","onCompositionEnd","handleChange","target","onChange","getDerivedStateFromProps","nextProps","nextState","undefined","userTriggeredUpdate","prototype","render","inputRef","restProps","__rest","createElement","__assign","ref","displayName","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/forms/asyncControllableInput.tsx"],"sourcesContent":["/* !\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent, DISPLAYNAME_PREFIX } from \"../../common\";\n\nexport type AsyncControllableInputProps = React.InputHTMLAttributes<HTMLInputElement> & {\n    inputRef?: React.Ref<HTMLInputElement>;\n};\n\ntype InputValue = AsyncControllableInputProps[\"value\"];\n\nexport interface AsyncControllableInputState {\n    /**\n     * Whether we are in the middle of a composition event.\n     *\n     * @default false\n     */\n    isComposing: boolean;\n\n    /**\n     * The source of truth for the input value. This is not updated during IME composition.\n     * It may be updated by a parent component.\n     *\n     * @default \"\"\n     */\n    value: InputValue;\n\n    /**\n     * The latest input value, which updates during IME composition. Defaults to props.value.\n     */\n    nextValue: InputValue;\n\n    /**\n     * Whether there is a pending update we are expecting from a parent component.\n     *\n     * @default false\n     */\n    hasPendingUpdate: boolean;\n}\n\n/**\n * A stateful wrapper around the low-level <input> component which works around a\n * [React bug](https://github.com/facebook/react/issues/3926). This bug is reproduced when an input\n * receives CompositionEvents (for example, through IME composition) and has its value prop updated\n * asychronously. This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n *\n * Note: this component does not apply any Blueprint-specific styling.\n */\nexport class AsyncControllableInput extends AbstractPureComponent<\n    AsyncControllableInputProps,\n    AsyncControllableInputState\n> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.AsyncControllableInput`;\n\n    /**\n     * The amount of time (in milliseconds) which the input will wait after a compositionEnd event before\n     * unlocking its state value for external updates via props. See `handleCompositionEnd` for more details.\n     */\n    public static COMPOSITION_END_DELAY = 10;\n\n    public state: AsyncControllableInputState = {\n        hasPendingUpdate: false,\n        isComposing: false,\n        nextValue: this.props.value,\n        value: this.props.value,\n    };\n\n    private cancelPendingCompositionEnd: (() => void) | null = null;\n\n    public static getDerivedStateFromProps(\n        nextProps: AsyncControllableInputProps,\n        nextState: AsyncControllableInputState,\n    ): Partial<AsyncControllableInputState> | null {\n        if (nextState.isComposing || nextProps.value === undefined) {\n            // don't derive anything from props if:\n            // - in uncontrolled mode, OR\n            // - currently composing, since we'll do that after composition ends\n            return null;\n        }\n\n        const userTriggeredUpdate = nextState.nextValue !== nextState.value;\n\n        if (userTriggeredUpdate) {\n            if (nextProps.value === nextState.nextValue) {\n                // parent has processed and accepted our update\n                if (nextState.hasPendingUpdate) {\n                    return { value: nextProps.value, hasPendingUpdate: false };\n                } else {\n                    return { value: nextState.nextValue };\n                }\n            } else {\n                if (nextProps.value === nextState.value) {\n                    // we have sent the update to our parent, but it has not been processed yet. just wait.\n                    // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n                    // causing the cursor to jump once the new value is accepted\n                    return { hasPendingUpdate: true };\n                }\n                // accept controlled update overriding user action\n                return { value: nextProps.value, nextValue: nextProps.value, hasPendingUpdate: false };\n            }\n        } else {\n            // accept controlled update, could be confirming or denying user action\n            return { value: nextProps.value, nextValue: nextProps.value, hasPendingUpdate: false };\n        }\n    }\n\n    public render() {\n        const { isComposing, hasPendingUpdate, value, nextValue } = this.state;\n        const { inputRef, ...restProps } = this.props;\n        return (\n            <input\n                {...restProps}\n                ref={inputRef}\n                // render the pending value even if it is not confirmed by a parent's async controlled update\n                // so that the cursor does not jump to the end of input as reported in\n                // https://github.com/palantir/blueprint/issues/4298\n                value={isComposing || hasPendingUpdate ? nextValue : value}\n                onCompositionStart={this.handleCompositionStart}\n                onCompositionEnd={this.handleCompositionEnd}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleCompositionStart = (e: React.CompositionEvent<HTMLInputElement>) => {\n        this.cancelPendingCompositionEnd?.();\n        this.setState({ isComposing: true });\n        this.props.onCompositionStart?.(e);\n    };\n\n    private handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n        // In some non-latin languages, a keystroke can end a composition event and immediately afterwards start another.\n        // This can lead to unexpected characters showing up in the text input. In order to circumvent this problem, we\n        // use a timeout which creates a delay which merges the two composition events, creating a more natural and predictable UX.\n        // `this.state.nextValue` will become \"locked\" (it cannot be overwritten by the `value` prop) until a delay (10ms) has\n        // passed without a new composition event starting.\n        this.cancelPendingCompositionEnd = this.setTimeout(\n            () => this.setState({ isComposing: false }),\n            AsyncControllableInput.COMPOSITION_END_DELAY,\n        );\n        this.props.onCompositionEnd?.(e);\n    };\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n\n        this.setState({ nextValue: value });\n        this.props.onChange?.(e);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}