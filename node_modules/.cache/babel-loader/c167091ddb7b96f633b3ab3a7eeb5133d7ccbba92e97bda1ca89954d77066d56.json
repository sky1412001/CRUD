{"ast":null,"code":"/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Classes } from \"../../common\";\nimport { ContextMenuPopover } from \"./contextMenuPopover\";\n/** DOM element which contains the context menu singleton instance for the imperative ContextMenu APIs. */\nvar contextMenuElement;\n/**\n * Show a context menu at a particular offset from the top-left corner of the document.\n * The menu will appear below-right of this point and will flip to below-left if there is not enough\n * room onscreen. Additional props like `onClose`, `isDarkTheme`, etc. can be forwarded to the `<ContextMenuPopover>`.\n *\n * Context menus created with this API will automatically close when a user clicks outside the popover.\n * You may force them to close by using `hideContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution,\n * especially if your build system allows multiple copies of Blueprint libraries to be bundled into an application at\n * once.\n *\n * Alternative APIs to consider which do not have the limitations of global state:\n *  - `<ContextMenu>`\n *  - `<ContextMenuPopover>`\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function showContextMenu(props) {\n  if (contextMenuElement === undefined) {\n    contextMenuElement = document.createElement(\"div\");\n    contextMenuElement.classList.add(Classes.CONTEXT_MENU);\n    document.body.appendChild(contextMenuElement);\n  } else {\n    // N.B. It's important to unmount previous instances of the ContextMenuPopover rendered by this function.\n    // Otherwise, React will detect no change in props sent to the already-mounted component, and therefore\n    // do nothing after the first call to this function, leading to bugs like https://github.com/palantir/blueprint/issues/5949\n    ReactDOM.unmountComponentAtNode(contextMenuElement);\n  }\n  ReactDOM.render(React.createElement(UncontrolledContextMenuPopover, __assign({}, props)), contextMenuElement);\n}\n/**\n * Hide a context menu that was created using `showContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution.\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function hideContextMenu() {\n  if (contextMenuElement !== undefined) {\n    ReactDOM.unmountComponentAtNode(contextMenuElement);\n    contextMenuElement = undefined;\n  }\n}\n/**\n * A simple wrapper around `ContextMenuPopover` which is open by default and uncontrolled.\n * It closes when a user clicks outside the popover.\n */\nfunction UncontrolledContextMenuPopover(props) {\n  var _a = React.useState(true),\n    isOpen = _a[0],\n    setIsOpen = _a[1];\n  var handleClose = React.useCallback(function () {\n    var _a;\n    setIsOpen(false);\n    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n  }, [props.onClose]);\n  return React.createElement(ContextMenuPopover, __assign({\n    isOpen: isOpen\n  }, props, {\n    onClose: handleClose\n  }));\n}","map":{"version":3,"names":["React","ReactDOM","Classes","ContextMenuPopover","contextMenuElement","showContextMenu","props","undefined","document","createElement","classList","add","CONTEXT_MENU","body","appendChild","unmountComponentAtNode","render","UncontrolledContextMenuPopover","__assign","hideContextMenu","_a","useState","isOpen","setIsOpen","handleClose","useCallback","onClose","call"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/context-menu/contextMenuSingleton.tsx"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Classes } from \"../../common\";\nimport { ContextMenuPopover, ContextMenuPopoverProps } from \"./contextMenuPopover\";\n\n/** DOM element which contains the context menu singleton instance for the imperative ContextMenu APIs. */\nlet contextMenuElement: HTMLElement | undefined;\n\n/**\n * Show a context menu at a particular offset from the top-left corner of the document.\n * The menu will appear below-right of this point and will flip to below-left if there is not enough\n * room onscreen. Additional props like `onClose`, `isDarkTheme`, etc. can be forwarded to the `<ContextMenuPopover>`.\n *\n * Context menus created with this API will automatically close when a user clicks outside the popover.\n * You may force them to close by using `hideContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution,\n * especially if your build system allows multiple copies of Blueprint libraries to be bundled into an application at\n * once.\n *\n * Alternative APIs to consider which do not have the limitations of global state:\n *  - `<ContextMenu>`\n *  - `<ContextMenuPopover>`\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function showContextMenu(props: Omit<ContextMenuPopoverProps, \"isOpen\">) {\n    if (contextMenuElement === undefined) {\n        contextMenuElement = document.createElement(\"div\");\n        contextMenuElement.classList.add(Classes.CONTEXT_MENU);\n        document.body.appendChild(contextMenuElement);\n    } else {\n        // N.B. It's important to unmount previous instances of the ContextMenuPopover rendered by this function.\n        // Otherwise, React will detect no change in props sent to the already-mounted component, and therefore\n        // do nothing after the first call to this function, leading to bugs like https://github.com/palantir/blueprint/issues/5949\n        ReactDOM.unmountComponentAtNode(contextMenuElement);\n    }\n\n    ReactDOM.render(<UncontrolledContextMenuPopover {...props} />, contextMenuElement);\n}\n\n/**\n * Hide a context menu that was created using `showContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution.\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function hideContextMenu() {\n    if (contextMenuElement !== undefined) {\n        ReactDOM.unmountComponentAtNode(contextMenuElement);\n        contextMenuElement = undefined;\n    }\n}\n\n/**\n * A simple wrapper around `ContextMenuPopover` which is open by default and uncontrolled.\n * It closes when a user clicks outside the popover.\n */\nfunction UncontrolledContextMenuPopover(props: Omit<ContextMenuPopoverProps, \"isOpen\">) {\n    const [isOpen, setIsOpen] = React.useState(true);\n    const handleClose = React.useCallback(() => {\n        setIsOpen(false);\n        props.onClose?.();\n    }, [props.onClose]);\n\n    return <ContextMenuPopover isOpen={isOpen} {...props} onClose={handleClose} />;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,QAAQ,MAAM,WAAW;AAErC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAiC,sBAAsB;AAElF;AACA,IAAIC,kBAA2C;AAE/C;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,eAAeA,CAACC,KAA8C;EAC1E,IAAIF,kBAAkB,KAAKG,SAAS,EAAE;IAClCH,kBAAkB,GAAGI,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAClDL,kBAAkB,CAACM,SAAS,CAACC,GAAG,CAACT,OAAO,CAACU,YAAY,CAAC;IACtDJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACV,kBAAkB,CAAC;GAChD,MAAM;IACH;IACA;IACA;IACAH,QAAQ,CAACc,sBAAsB,CAACX,kBAAkB,CAAC;;EAGvDH,QAAQ,CAACe,MAAM,CAAChB,KAAA,CAAAS,aAAA,CAACQ,8BAA8B,EAAAC,QAAA,KAAKZ,KAAK,EAAI,EAAEF,kBAAkB,CAAC;AACtF;AAEA;;;;;;;AAOA,OAAM,SAAUe,eAAeA,CAAA;EAC3B,IAAIf,kBAAkB,KAAKG,SAAS,EAAE;IAClCN,QAAQ,CAACc,sBAAsB,CAACX,kBAAkB,CAAC;IACnDA,kBAAkB,GAAGG,SAAS;;AAEtC;AAEA;;;;AAIA,SAASU,8BAA8BA,CAACX,KAA8C;EAC5E,IAAAc,EAAA,GAAsBpB,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAAC;IAAzCC,MAAM,GAAAF,EAAA;IAAEG,SAAS,GAAAH,EAAA,GAAwB;EAChD,IAAMI,WAAW,GAAGxB,KAAK,CAACyB,WAAW,CAAC;;IAClCF,SAAS,CAAC,KAAK,CAAC;IAChB,CAAAH,EAAA,GAAAd,KAAK,CAACoB,OAAO,cAAAN,EAAA,uBAAAA,EAAA,CAAAO,IAAA,CAAArB,KAAA,CAAI;EACrB,CAAC,EAAE,CAACA,KAAK,CAACoB,OAAO,CAAC,CAAC;EAEnB,OAAO1B,KAAA,CAAAS,aAAA,CAACN,kBAAkB,EAAAe,QAAA;IAACI,MAAM,EAAEA;EAAM,GAAMhB,KAAK;IAAEoB,OAAO,EAAEF;EAAW,GAAI;AAClF"},"metadata":{},"sourceType":"module","externalDependencies":[]}