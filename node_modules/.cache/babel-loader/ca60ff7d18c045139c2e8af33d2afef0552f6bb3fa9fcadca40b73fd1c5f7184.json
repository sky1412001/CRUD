{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nexport var SpinnerSize;\n(function (SpinnerSize) {\n  SpinnerSize[SpinnerSize[\"SMALL\"] = 20] = \"SMALL\";\n  SpinnerSize[SpinnerSize[\"STANDARD\"] = 50] = \"STANDARD\";\n  SpinnerSize[SpinnerSize[\"LARGE\"] = 100] = \"LARGE\";\n})(SpinnerSize || (SpinnerSize = {}));\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\".concat(R, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,\").concat(R * 2, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,-\").concat(R * 2);\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\n/**\n * Spinner component.\n *\n * @see https://blueprintjs.com/docs/#core/components/spinner\n */\nvar Spinner = /** @class */function (_super) {\n  __extends(Spinner, _super);\n  function Spinner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Spinner.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.value !== this.props.value) {\n      // IE/Edge: re-render after changing value to force SVG update\n      this.forceUpdate();\n    }\n  };\n  Spinner.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      className = _b.className,\n      intent = _b.intent,\n      value = _b.value,\n      _c = _b.tagName,\n      tagName = _c === void 0 ? \"div\" : _c,\n      htmlProps = __rest(_b, [\"className\", \"intent\", \"value\", \"tagName\"]);\n    var size = this.getSize();\n    var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_a = {}, _a[Classes.SPINNER_NO_SPIN] = value != null, _a), className);\n    // keep spinner track width consistent at all sizes (down to about 10px).\n    var strokeWidth = Math.min(MIN_STROKE_WIDTH, STROKE_WIDTH * SpinnerSize.LARGE / size);\n    var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n    // multiple DOM elements around SVG are necessary to properly isolate animation:\n    // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n    // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n    return React.createElement(tagName, __assign({\n      \"aria-label\": \"loading\",\n      \"aria-valuemax\": 100,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": value === undefined ? undefined : value * 100,\n      className: classes,\n      role: \"progressbar\"\n    }, htmlProps), React.createElement(tagName, {\n      className: Classes.SPINNER_ANIMATION\n    }, React.createElement(\"svg\", {\n      width: size,\n      height: size,\n      strokeWidth: strokeWidth.toFixed(2),\n      viewBox: this.getViewBox(strokeWidth)\n    }, React.createElement(\"path\", {\n      className: Classes.SPINNER_TRACK,\n      d: SPINNER_TRACK\n    }), React.createElement(\"path\", {\n      className: Classes.SPINNER_HEAD,\n      d: SPINNER_TRACK,\n      pathLength: PATH_LENGTH,\n      strokeDasharray: \"\".concat(PATH_LENGTH, \" \").concat(PATH_LENGTH),\n      strokeDashoffset: strokeOffset\n    }))));\n  };\n  Spinner.prototype.validateProps = function (_a) {\n    var _b = _a.className,\n      className = _b === void 0 ? \"\" : _b,\n      size = _a.size;\n    if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n      console.warn(SPINNER_WARN_CLASSES_SIZE);\n    }\n  };\n  /**\n   * Resolve size to a pixel value.\n   * Size can be set by className, props, default, or minimum constant.\n   */\n  Spinner.prototype.getSize = function () {\n    var _a = this.props,\n      _b = _a.className,\n      className = _b === void 0 ? \"\" : _b,\n      size = _a.size;\n    if (size == null) {\n      // allow Classes constants to determine default size.\n      if (className.indexOf(Classes.SMALL) >= 0) {\n        return SpinnerSize.SMALL;\n      } else if (className.indexOf(Classes.LARGE) >= 0) {\n        return SpinnerSize.LARGE;\n      }\n      return SpinnerSize.STANDARD;\n    }\n    return Math.max(MIN_SIZE, size);\n  };\n  /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n  Spinner.prototype.getViewBox = function (strokeWidth) {\n    var radius = R + strokeWidth / 2;\n    var viewBoxX = (50 - radius).toFixed(2);\n    var viewBoxWidth = (radius * 2).toFixed(2);\n    return \"\".concat(viewBoxX, \" \").concat(viewBoxX, \" \").concat(viewBoxWidth, \" \").concat(viewBoxWidth);\n  };\n  Spinner.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Spinner\");\n  return Spinner;\n}(AbstractPureComponent);\nexport { Spinner };","map":{"version":3,"names":["classNames","React","AbstractPureComponent","Classes","SPINNER_WARN_CLASSES_SIZE","DISPLAYNAME_PREFIX","clamp","SpinnerSize","R","SPINNER_TRACK","concat","PATH_LENGTH","MIN_SIZE","STROKE_WIDTH","MIN_STROKE_WIDTH","Spinner","_super","__extends","prototype","componentDidUpdate","prevProps","value","props","forceUpdate","render","_b","className","intent","_c","tagName","htmlProps","__rest","size","getSize","classes","SPINNER","intentClass","_a","SPINNER_NO_SPIN","strokeWidth","Math","min","LARGE","strokeOffset","createElement","__assign","undefined","role","SPINNER_ANIMATION","width","height","toFixed","viewBox","getViewBox","d","SPINNER_HEAD","pathLength","strokeDasharray","strokeDashoffset","validateProps","indexOf","SMALL","console","warn","STANDARD","max","radius","viewBoxX","viewBoxWidth","displayName"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/spinner/spinner.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\n\nexport enum SpinnerSize {\n    SMALL = 20,\n    STANDARD = 50,\n    LARGE = 100,\n}\n\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nconst R = 45;\nconst SPINNER_TRACK = `M 50,50 m 0,-${R} a ${R},${R} 0 1 1 0,${R * 2} a ${R},${R} 0 1 1 0,-${R * 2}`;\n\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nconst PATH_LENGTH = 280;\n\nconst MIN_SIZE = 10;\nconst STROKE_WIDTH = 4;\nconst MIN_STROKE_WIDTH = 16;\n\nexport interface SpinnerProps<T extends HTMLElement = HTMLElement> extends Props, IntentProps, React.HTMLAttributes<T> {\n    /**\n     * Width and height of the spinner in pixels. The size cannot be less than\n     * 10px.\n     *\n     * Constants are available for common sizes:\n     * - `SpinnerSize.SMALL = 20px`\n     * - `SpinnerSize.STANDARD = 50px`\n     * - `SpinnerSize.LARGE = 100px`\n     *\n     * @default SpinnerSize.STANDARD = 50\n     */\n    size?: number;\n\n    /**\n     * HTML tag for the two wrapper elements. If rendering a `<Spinner>` inside\n     * an `<svg>`, change this to an SVG element like `\"g\"`.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A value between 0 and 1 (inclusive) representing how far along the operation is.\n     * Values below 0 or above 1 will be interpreted as 0 or 1 respectively.\n     * Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.\n     */\n    value?: number;\n}\n\n/**\n * Spinner component.\n *\n * @see https://blueprintjs.com/docs/#core/components/spinner\n */\nexport class Spinner extends AbstractPureComponent<SpinnerProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Spinner`;\n\n    public componentDidUpdate(prevProps: SpinnerProps) {\n        if (prevProps.value !== this.props.value) {\n            // IE/Edge: re-render after changing value to force SVG update\n            this.forceUpdate();\n        }\n    }\n\n    public render() {\n        const { className, intent, value, tagName = \"div\", ...htmlProps } = this.props;\n        const size = this.getSize();\n\n        const classes = classNames(\n            Classes.SPINNER,\n            Classes.intentClass(intent),\n            { [Classes.SPINNER_NO_SPIN]: value != null },\n            className,\n        );\n\n        // keep spinner track width consistent at all sizes (down to about 10px).\n        const strokeWidth = Math.min(MIN_STROKE_WIDTH, (STROKE_WIDTH * SpinnerSize.LARGE) / size);\n        const strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n\n        // multiple DOM elements around SVG are necessary to properly isolate animation:\n        // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n        // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n        return React.createElement(\n            tagName,\n            {\n                \"aria-label\": \"loading\",\n                \"aria-valuemax\": 100,\n                \"aria-valuemin\": 0,\n                \"aria-valuenow\": value === undefined ? undefined : value * 100,\n                className: classes,\n                role: \"progressbar\",\n                ...htmlProps,\n            },\n            React.createElement(\n                tagName,\n                { className: Classes.SPINNER_ANIMATION },\n                <svg\n                    width={size}\n                    height={size}\n                    strokeWidth={strokeWidth.toFixed(2)}\n                    viewBox={this.getViewBox(strokeWidth)}\n                >\n                    <path className={Classes.SPINNER_TRACK} d={SPINNER_TRACK} />\n                    <path\n                        className={Classes.SPINNER_HEAD}\n                        d={SPINNER_TRACK}\n                        pathLength={PATH_LENGTH}\n                        strokeDasharray={`${PATH_LENGTH} ${PATH_LENGTH}`}\n                        strokeDashoffset={strokeOffset}\n                    />\n                </svg>,\n            ),\n        );\n    }\n\n    protected validateProps({ className = \"\", size }: SpinnerProps) {\n        if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n            console.warn(SPINNER_WARN_CLASSES_SIZE);\n        }\n    }\n\n    /**\n     * Resolve size to a pixel value.\n     * Size can be set by className, props, default, or minimum constant.\n     */\n    private getSize() {\n        const { className = \"\", size } = this.props;\n        if (size == null) {\n            // allow Classes constants to determine default size.\n            if (className.indexOf(Classes.SMALL) >= 0) {\n                return SpinnerSize.SMALL;\n            } else if (className.indexOf(Classes.LARGE) >= 0) {\n                return SpinnerSize.LARGE;\n            }\n            return SpinnerSize.STANDARD;\n        }\n        return Math.max(MIN_SIZE, size);\n    }\n\n    /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n    private getViewBox(strokeWidth: number) {\n        const radius = R + strokeWidth / 2;\n        const viewBoxX = (50 - radius).toFixed(2);\n        const viewBoxWidth = (radius * 2).toFixed(2);\n        return `${viewBoxX} ${viewBoxX} ${viewBoxWidth} ${viewBoxWidth}`;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}