{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes, mergeRefs } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * Renders common control elements, with additional props to customize appearance.\n * This function is not exported and is only used within this module for `Checkbox`, `Radio`, and `Switch` below.\n */\nfunction renderControl(props, ref) {\n  var _a;\n  var alignIndicator = props.alignIndicator,\n    children = props.children,\n    className = props.className,\n    indicatorChildren = props.indicatorChildren,\n    inline = props.inline,\n    inputRef = props.inputRef,\n    label = props.label,\n    labelElement = props.labelElement,\n    large = props.large,\n    style = props.style,\n    type = props.type,\n    typeClassName = props.typeClassName,\n    _b = props.tagName,\n    tagName = _b === void 0 ? \"label\" : _b,\n    htmlProps = __rest(props, [\"alignIndicator\", \"children\", \"className\", \"indicatorChildren\", \"inline\", \"inputRef\", \"label\", \"labelElement\", \"large\", \"style\", \"type\", \"typeClassName\", \"tagName\"]);\n  var classes = classNames(Classes.CONTROL, typeClassName, (_a = {}, _a[Classes.DISABLED] = htmlProps.disabled, _a[Classes.INLINE] = inline, _a[Classes.LARGE] = large, _a), Classes.alignmentClass(alignIndicator), className);\n  return React.createElement(tagName, {\n    className: classes,\n    style: style,\n    ref: ref\n  }, React.createElement(\"input\", __assign({}, htmlProps, {\n    ref: inputRef,\n    type: type\n  })), React.createElement(\"span\", {\n    className: Classes.CONTROL_INDICATOR\n  }, indicatorChildren), label, labelElement, children);\n}\n/**\n * Switch component.\n *\n * @see https://blueprintjs.com/docs/#core/components/switch\n */\nexport var Switch = React.forwardRef(function (_a, ref) {\n  var innerLabelChecked = _a.innerLabelChecked,\n    innerLabel = _a.innerLabel,\n    controlProps = __rest(_a, [\"innerLabelChecked\", \"innerLabel\"]);\n  var switchLabels = innerLabel || innerLabelChecked ? [React.createElement(\"div\", {\n    key: \"checked\",\n    className: Classes.CONTROL_INDICATOR_CHILD\n  }, React.createElement(\"div\", {\n    className: Classes.SWITCH_INNER_TEXT\n  }, innerLabelChecked ? innerLabelChecked : innerLabel)), React.createElement(\"div\", {\n    key: \"unchecked\",\n    className: Classes.CONTROL_INDICATOR_CHILD\n  }, React.createElement(\"div\", {\n    className: Classes.SWITCH_INNER_TEXT\n  }, innerLabel))] : null;\n  return renderControl(__assign(__assign({}, controlProps), {\n    indicatorChildren: switchLabels,\n    type: \"checkbox\",\n    typeClassName: Classes.SWITCH\n  }), ref);\n});\nSwitch.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Switch\");\n/**\n * Radio component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio\n */\nexport var Radio = React.forwardRef(function (props, ref) {\n  return renderControl(__assign(__assign({}, props), {\n    type: \"radio\",\n    typeClassName: Classes.RADIO\n  }), ref);\n});\nRadio.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Radio\");\n/**\n * Checkbox component.\n *\n * @see https://blueprintjs.com/docs/#core/components/checkbox\n */\nexport var Checkbox = React.forwardRef(function (props, ref) {\n  var defaultIndeterminate = props.defaultIndeterminate,\n    indeterminate = props.indeterminate,\n    onChange = props.onChange,\n    controlProps = __rest(props, [\"defaultIndeterminate\", \"indeterminate\", \"onChange\"]);\n  var _a = React.useState(indeterminate || defaultIndeterminate || false),\n    isIndeterminate = _a[0],\n    setIsIndeterminate = _a[1];\n  var localInputRef = React.useRef(null);\n  var inputRef = props.inputRef === undefined ? localInputRef : mergeRefs(props.inputRef, localInputRef);\n  var handleChange = React.useCallback(function (evt) {\n    // update state immediately only if uncontrolled\n    if (indeterminate === undefined) {\n      setIsIndeterminate(evt.target.indeterminate);\n    }\n    // otherwise wait for props change. always invoke handler.\n    onChange === null || onChange === void 0 ? void 0 : onChange(evt);\n  }, [onChange]);\n  React.useEffect(function () {\n    if (indeterminate !== undefined) {\n      setIsIndeterminate(indeterminate);\n    }\n  }, [indeterminate]);\n  React.useEffect(function () {\n    if (localInputRef.current != null) {\n      localInputRef.current.indeterminate = isIndeterminate;\n    }\n  }, [localInputRef, isIndeterminate]);\n  return renderControl(__assign(__assign({}, controlProps), {\n    inputRef: inputRef,\n    onChange: handleChange,\n    type: \"checkbox\",\n    typeClassName: Classes.CHECKBOX\n  }), ref);\n});\nCheckbox.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Checkbox\");","map":{"version":3,"names":["classNames","React","Classes","mergeRefs","DISPLAYNAME_PREFIX","renderControl","props","ref","alignIndicator","children","className","indicatorChildren","inline","inputRef","label","labelElement","large","style","type","typeClassName","_b","tagName","htmlProps","__rest","classes","CONTROL","_a","DISABLED","disabled","INLINE","LARGE","alignmentClass","createElement","__assign","CONTROL_INDICATOR","Switch","forwardRef","innerLabelChecked","innerLabel","controlProps","switchLabels","key","CONTROL_INDICATOR_CHILD","SWITCH_INNER_TEXT","SWITCH","displayName","concat","Radio","RADIO","Checkbox","defaultIndeterminate","indeterminate","onChange","useState","isIndeterminate","setIsIndeterminate","localInputRef","useRef","undefined","handleChange","useCallback","evt","target","useEffect","current","CHECKBOX"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/forms/controls.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Alignment, Classes, mergeRefs } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLInputProps, Props } from \"../../common/props\";\n\nexport interface ControlProps extends Props, HTMLInputProps, React.RefAttributes<HTMLLabelElement> {\n    // NOTE: HTML props are duplicated here to provide control-specific documentation\n\n    /**\n     * Alignment of the indicator within container.\n     *\n     * @default Alignment.LEFT\n     */\n    alignIndicator?: Alignment;\n\n    /** Whether the control is checked. */\n    checked?: boolean;\n\n    /** JSX label for the control. */\n    children?: React.ReactNode;\n\n    /** Whether the control is initially checked (uncontrolled mode). */\n    defaultChecked?: boolean;\n\n    /** Whether the control is non-interactive. */\n    disabled?: boolean;\n\n    /** Whether the control should appear as an inline element. */\n    inline?: boolean;\n\n    /** Ref attached to the HTML `<input>` element backing this component. */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /**\n     * Text label for the control.\n     *\n     * Use `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\n     * but TypeScript will throw an error because `HTMLAttributes` only allows strings.\n     */\n    label?: string;\n\n    /**\n     * JSX Element label for the control.\n     *\n     * This prop is a workaround for TypeScript consumers as the type definition for `label` only\n     * accepts strings. JavaScript consumers can provide a JSX element directly to `label`.\n     */\n    labelElement?: React.ReactNode;\n\n    /** Whether this control should use large styles. */\n    large?: boolean;\n\n    /** Event handler invoked when input value is changed. */\n    onChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * Name of the HTML tag that wraps the checkbox.\n     *\n     * By default a `<label>` is used, which effectively enlarges the click\n     * target to include all of its children. Supply a different tag name if\n     * this behavior is undesirable or you're listening to click events from a\n     * parent element (as the label can register duplicate clicks).\n     *\n     * @default \"label\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n}\n\n/** Internal props for Checkbox/Radio/Switch to render correctly. */\ninterface ControlInternalProps extends ControlProps {\n    type: \"checkbox\" | \"radio\";\n    typeClassName: string;\n    indicatorChildren?: React.ReactNode;\n}\n\n/**\n * Renders common control elements, with additional props to customize appearance.\n * This function is not exported and is only used within this module for `Checkbox`, `Radio`, and `Switch` below.\n */\nfunction renderControl(props: ControlInternalProps, ref: React.Ref<HTMLLabelElement>) {\n    const {\n        alignIndicator,\n        children,\n        className,\n        indicatorChildren,\n        inline,\n        inputRef,\n        label,\n        labelElement,\n        large,\n        style,\n        type,\n        typeClassName,\n        tagName = \"label\",\n        ...htmlProps\n    } = props;\n    const classes = classNames(\n        Classes.CONTROL,\n        typeClassName,\n        {\n            [Classes.DISABLED]: htmlProps.disabled,\n            [Classes.INLINE]: inline,\n            [Classes.LARGE]: large,\n        },\n        Classes.alignmentClass(alignIndicator),\n        className,\n    );\n\n    return React.createElement(\n        tagName,\n        { className: classes, style, ref },\n        <input {...htmlProps} ref={inputRef} type={type} />,\n        <span className={Classes.CONTROL_INDICATOR}>{indicatorChildren}</span>,\n        label,\n        labelElement,\n        children,\n    );\n}\n\n//\n// Switch\n//\n\nexport interface SwitchProps extends ControlProps {\n    /**\n     * Text to display inside the switch indicator when checked.\n     * If `innerLabel` is provided and this prop is omitted, then `innerLabel`\n     * will be used for both states.\n     *\n     * @default innerLabel\n     */\n    innerLabelChecked?: string;\n\n    /**\n     * Text to display inside the switch indicator when unchecked.\n     */\n    innerLabel?: string;\n}\n\n/**\n * Switch component.\n *\n * @see https://blueprintjs.com/docs/#core/components/switch\n */\nexport const Switch: React.FC<SwitchProps> = React.forwardRef(\n    ({ innerLabelChecked, innerLabel, ...controlProps }, ref) => {\n        const switchLabels =\n            innerLabel || innerLabelChecked\n                ? [\n                      <div key=\"checked\" className={Classes.CONTROL_INDICATOR_CHILD}>\n                          <div className={Classes.SWITCH_INNER_TEXT}>\n                              {innerLabelChecked ? innerLabelChecked : innerLabel}\n                          </div>\n                      </div>,\n                      <div key=\"unchecked\" className={Classes.CONTROL_INDICATOR_CHILD}>\n                          <div className={Classes.SWITCH_INNER_TEXT}>{innerLabel}</div>\n                      </div>,\n                  ]\n                : null;\n        return renderControl(\n            {\n                ...controlProps,\n                indicatorChildren: switchLabels,\n                type: \"checkbox\",\n                typeClassName: Classes.SWITCH,\n            },\n            ref,\n        );\n    },\n);\nSwitch.displayName = `${DISPLAYNAME_PREFIX}.Switch`;\n\n//\n// Radio\n//\n\nexport type RadioProps = ControlProps;\n\n/**\n * Radio component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio\n */\nexport const Radio: React.FC<RadioProps> = React.forwardRef((props, ref) =>\n    renderControl(\n        {\n            ...props,\n            type: \"radio\",\n            typeClassName: Classes.RADIO,\n        },\n        ref,\n    ),\n);\nRadio.displayName = `${DISPLAYNAME_PREFIX}.Radio`;\n\n//\n// Checkbox\n//\n\nexport interface CheckboxProps extends ControlProps {\n    /** Whether this checkbox is initially indeterminate (uncontrolled mode). */\n    defaultIndeterminate?: boolean;\n\n    /**\n     * Whether this checkbox is indeterminate, or \"partially checked.\"\n     * The checkbox will appear with a small dash instead of a tick to indicate that the value\n     * is not exactly true or false.\n     *\n     * Note that this prop takes precendence over `checked`: if a checkbox is marked both\n     * `checked` and `indeterminate` via props, it will appear as indeterminate in the DOM.\n     */\n    indeterminate?: boolean;\n}\n\n/**\n * Checkbox component.\n *\n * @see https://blueprintjs.com/docs/#core/components/checkbox\n */\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef((props, ref) => {\n    const { defaultIndeterminate, indeterminate, onChange, ...controlProps } = props;\n    const [isIndeterminate, setIsIndeterminate] = React.useState<boolean>(\n        indeterminate || defaultIndeterminate || false,\n    );\n\n    const localInputRef = React.useRef<HTMLInputElement>(null);\n    const inputRef = props.inputRef === undefined ? localInputRef : mergeRefs(props.inputRef, localInputRef);\n\n    const handleChange = React.useCallback(\n        (evt: React.ChangeEvent<HTMLInputElement>) => {\n            // update state immediately only if uncontrolled\n            if (indeterminate === undefined) {\n                setIsIndeterminate(evt.target.indeterminate);\n            }\n            // otherwise wait for props change. always invoke handler.\n            onChange?.(evt);\n        },\n        [onChange],\n    );\n\n    React.useEffect(() => {\n        if (indeterminate !== undefined) {\n            setIsIndeterminate(indeterminate);\n        }\n    }, [indeterminate]);\n\n    React.useEffect(() => {\n        if (localInputRef.current != null) {\n            localInputRef.current.indeterminate = isIndeterminate;\n        }\n    }, [localInputRef, isIndeterminate]);\n\n    return renderControl(\n        {\n            ...controlProps,\n            inputRef,\n            onChange: handleChange,\n            type: \"checkbox\",\n            typeClassName: Classes.CHECKBOX,\n        },\n        ref,\n    );\n});\nCheckbox.displayName = `${DISPLAYNAME_PREFIX}.Checkbox`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}