{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/**\n * Panel stack component.\n *\n * @see https://blueprintjs.com/docs/#core/components/panel-stack\n * @deprecated use `PanelStack2<T>`\n */\nvar PanelStack = /** @class */function (_super) {\n  __extends(PanelStack, _super);\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : _this.props.initialPanel !== undefined ? [_this.props.initialPanel] : []\n    };\n    _this.renderPanel = function (panel, index) {\n      var _a = _this.props,\n        renderActivePanelOnly = _a.renderActivePanelOnly,\n        _b = _a.showPanelHeader,\n        showPanelHeader = _b === void 0 ? true : _b;\n      var stack = _this.state.stack;\n      // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n      // therefore they would not trigger the \"enter\" transition event as they were entered.\n      // To force the enter event, we want to change the key, but stack.length is not enough\n      // and a single panel should not rerender as long as it's hidden.\n      // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n      // second one, active changes only when the panel becomes or stops being active.\n      var layer = stack.length - index;\n      var key = renderActivePanelOnly ? stack.length : layer;\n      return React.createElement(CSSTransition, {\n        classNames: Classes.PANEL_STACK,\n        key: key,\n        timeout: 400\n      }, React.createElement(PanelView, {\n        onClose: _this.handlePanelClose,\n        onOpen: _this.handlePanelOpen,\n        panel: panel,\n        previousPanel: stack[index + 1],\n        showHeader: showPanelHeader\n      }));\n    };\n    _this.handlePanelClose = function (panel) {\n      var _a, _b;\n      var stack = _this.state.stack;\n      // only remove this panel if it is at the top and not the only one.\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n      (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.slice(1)\n          };\n        });\n      }\n    };\n    _this.handlePanelOpen = function (panel) {\n      var _a, _b;\n      (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: __spreadArray([panel], state.stack, true)\n          };\n        });\n      }\n    };\n    return _this;\n  }\n  PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n    // Always update local stack if stack prop changes\n    if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n      this.setState({\n        stack: this.props.stack.slice().reverse()\n      });\n    }\n    // Only update animation direction if stack length changes\n    var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n    var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n    if (stackLength !== prevStackLength && prevProps.stack != null) {\n      this.setState({\n        direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\"\n      });\n    }\n  };\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, \"\".concat(Classes.PANEL_STACK, \"-\").concat(this.state.direction), this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderPanels());\n  };\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n    if (props.stack != null && props.stack.length === 0) {\n      console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n  PanelStack.prototype.renderPanels = function () {\n    var _a = this.props.renderActivePanelOnly,\n      renderActivePanelOnly = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n    if (stack.length === 0) {\n      return null;\n    }\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panelViews = panelsToRender.map(this.renderPanel).reverse();\n    return panelViews;\n  };\n  return PanelStack;\n}(AbstractPureComponent);\nexport { PanelStack };","map":{"version":3,"names":["classNames","React","CSSTransition","TransitionGroup","AbstractPureComponent","Classes","Errors","PanelView","PanelStack","_super","__extends","_this","apply","arguments","state","direction","stack","props","slice","reverse","initialPanel","undefined","renderPanel","panel","index","_a","renderActivePanelOnly","_b","showPanelHeader","layer","length","key","createElement","PANEL_STACK","timeout","onClose","handlePanelClose","onOpen","handlePanelOpen","previousPanel","showHeader","call","setState","__spreadArray","prototype","componentDidUpdate","prevProps","prevState","stackLength","prevStackLength","render","classes","concat","className","component","renderPanels","validateProps","console","error","PANEL_STACK_INITIAL_PANEL_STACK_MUTEX","PANEL_STACK_REQUIRES_PANEL","panelsToRender","panelViews","map"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/components/panel-stack/panelStack.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { Props } from \"../../common/props\";\nimport { IPanel } from \"./panelProps\";\nimport { PanelView } from \"./panelView\";\n\n/* eslint-disable deprecation/deprecation */\n\nexport interface PanelStackProps extends Props {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: IPanel<any>;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose?: (removedPanel: IPanel) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen?: (addedPanel: IPanel) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: Array<IPanel<any>>;\n}\n\nexport interface PanelStackState {\n    /** Whether the stack is currently animating the push or pop of a panel. */\n    direction: \"push\" | \"pop\";\n\n    /** The current stack of panels. The first panel in the stack will be displayed. */\n    stack: IPanel[];\n}\n\n/**\n * Panel stack component.\n *\n * @see https://blueprintjs.com/docs/#core/components/panel-stack\n * @deprecated use `PanelStack2<T>`\n */\n\nexport class PanelStack extends AbstractPureComponent<PanelStackProps, PanelStackState> {\n    public state: PanelStackState = {\n        direction: \"push\",\n        stack:\n            this.props.stack != null\n                ? this.props.stack.slice().reverse()\n                : this.props.initialPanel !== undefined\n                ? [this.props.initialPanel]\n                : [],\n    };\n\n    public componentDidUpdate(prevProps: PanelStackProps, prevState: PanelStackState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        // Always update local stack if stack prop changes\n        if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n            this.setState({ stack: this.props.stack!.slice().reverse() });\n        }\n\n        // Only update animation direction if stack length changes\n        const stackLength = this.props.stack != null ? this.props.stack.length : 0;\n        const prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n        if (stackLength !== prevStackLength && prevProps.stack != null) {\n            this.setState({\n                direction: prevProps.stack.length - this.props.stack!.length < 0 ? \"push\" : \"pop\",\n            });\n        }\n    }\n\n    public render() {\n        const classes = classNames(\n            Classes.PANEL_STACK,\n            `${Classes.PANEL_STACK}-${this.state.direction}`,\n            this.props.className,\n        );\n        return (\n            <TransitionGroup className={classes} component=\"div\">\n                {this.renderPanels()}\n            </TransitionGroup>\n        );\n    }\n\n    protected validateProps(props: PanelStackProps) {\n        if (\n            (props.initialPanel == null && props.stack == null) ||\n            (props.initialPanel != null && props.stack != null)\n        ) {\n            console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n        }\n        if (props.stack != null && props.stack.length === 0) {\n            console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n        }\n    }\n\n    private renderPanels() {\n        const { renderActivePanelOnly = true } = this.props;\n        const { stack } = this.state;\n        if (stack.length === 0) {\n            return null;\n        }\n        const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n        const panelViews = panelsToRender.map(this.renderPanel).reverse();\n        return panelViews;\n    }\n\n    private renderPanel = (panel: IPanel, index: number) => {\n        const { renderActivePanelOnly, showPanelHeader = true } = this.props;\n        const { stack } = this.state;\n\n        // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n        // therefore they would not trigger the \"enter\" transition event as they were entered.\n        // To force the enter event, we want to change the key, but stack.length is not enough\n        // and a single panel should not rerender as long as it's hidden.\n        // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n        // second one, active changes only when the panel becomes or stops being active.\n        const layer = stack.length - index;\n        const key = renderActivePanelOnly ? stack.length : layer;\n\n        return (\n            <CSSTransition classNames={Classes.PANEL_STACK} key={key} timeout={400}>\n                <PanelView\n                    onClose={this.handlePanelClose}\n                    onOpen={this.handlePanelOpen}\n                    panel={panel}\n                    previousPanel={stack[index + 1]}\n                    showHeader={showPanelHeader}\n                />\n            </CSSTransition>\n        );\n    };\n\n    private handlePanelClose = (panel: IPanel) => {\n        const { stack } = this.state;\n        // only remove this panel if it is at the top and not the only one.\n        if (stack[0] !== panel || stack.length <= 1) {\n            return;\n        }\n        this.props.onClose?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"pop\",\n                stack: state.stack.slice(1),\n            }));\n        }\n    };\n\n    private handlePanelOpen = (panel: IPanel) => {\n        this.props.onOpen?.(panel);\n        if (this.props.stack == null) {\n            this.setState(state => ({\n                direction: \"push\",\n                stack: [panel, ...state.stack],\n            }));\n        }\n    };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,EAAEC,eAAe,QAAQ,wBAAwB;AAEvE,SAASC,qBAAqB,EAAEC,OAAO,QAAQ,cAAc;AAC7D,OAAO,KAAKC,MAAM,MAAM,qBAAqB;AAG7C,SAASC,SAAS,QAAQ,aAAa;AAwDvC;;;;;;AAOA,IAAAC,UAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAAhC,SAAAD,WAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IACWF,KAAA,CAAAG,KAAK,GAAoB;MAC5BC,SAAS,EAAE,MAAM;MACjBC,KAAK,EACDL,KAAI,CAACM,KAAK,CAACD,KAAK,IAAI,IAAI,GAClBL,KAAI,CAACM,KAAK,CAACD,KAAK,CAACE,KAAK,EAAE,CAACC,OAAO,EAAE,GAClCR,KAAI,CAACM,KAAK,CAACG,YAAY,KAAKC,SAAS,GACrC,CAACV,KAAI,CAACM,KAAK,CAACG,YAAY,CAAC,GACzB;KACb;IAwDOT,KAAA,CAAAW,WAAW,GAAG,UAACC,KAAa,EAAEC,KAAa;MACzC,IAAAC,EAAA,GAAoDd,KAAI,CAACM,KAAK;QAA5DS,qBAAqB,GAAAD,EAAA,CAAAC,qBAAA;QAAEC,EAAA,GAAAF,EAAA,CAAAG,eAAsB;QAAtBA,eAAe,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAe;MAC5D,IAAAX,KAAK,GAAKL,KAAI,CAACG,KAAK,CAAAE,KAAf;MAEb;MACA;MACA;MACA;MACA;MACA;MACA,IAAMa,KAAK,GAAGb,KAAK,CAACc,MAAM,GAAGN,KAAK;MAClC,IAAMO,GAAG,GAAGL,qBAAqB,GAAGV,KAAK,CAACc,MAAM,GAAGD,KAAK;MAExD,OACI5B,KAAA,CAAA+B,aAAA,CAAC9B,aAAa;QAACF,UAAU,EAAEK,OAAO,CAAC4B,WAAW;QAAEF,GAAG,EAAEA,GAAG;QAAEG,OAAO,EAAE;MAAG,GAClEjC,KAAA,CAAA+B,aAAA,CAACzB,SAAS;QACN4B,OAAO,EAAExB,KAAI,CAACyB,gBAAgB;QAC9BC,MAAM,EAAE1B,KAAI,CAAC2B,eAAe;QAC5Bf,KAAK,EAAEA,KAAK;QACZgB,aAAa,EAAEvB,KAAK,CAACQ,KAAK,GAAG,CAAC,CAAC;QAC/BgB,UAAU,EAAEZ;MAAe,EAC7B,CACU;IAExB,CAAC;IAEOjB,KAAA,CAAAyB,gBAAgB,GAAG,UAACb,KAAa;;MAC7B,IAAAP,KAAK,GAAKL,KAAI,CAACG,KAAK,CAAAE,KAAf;MACb;MACA,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKO,KAAK,IAAIP,KAAK,CAACc,MAAM,IAAI,CAAC,EAAE;QACzC;;MAEJ,CAAAH,EAAA,IAAAF,EAAA,GAAAd,KAAI,CAACM,KAAK,EAACkB,OAAO,cAAAR,EAAA,uBAAAA,EAAA,CAAAc,IAAA,CAAAhB,EAAA,EAAGF,KAAK,CAAC;MAC3B,IAAIZ,KAAI,CAACM,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;QAC1BL,KAAI,CAAC+B,QAAQ,CAAC,UAAA5B,KAAK;UAAI,OAAC;YACpBC,SAAS,EAAE,KAAK;YAChBC,KAAK,EAAEF,KAAK,CAACE,KAAK,CAACE,KAAK,CAAC,CAAC;WAC7B;QAHsB,CAGrB,CAAC;;IAEX,CAAC;IAEOP,KAAA,CAAA2B,eAAe,GAAG,UAACf,KAAa;;MACpC,CAAAI,EAAA,IAAAF,EAAA,GAAAd,KAAI,CAACM,KAAK,EAACoB,MAAM,cAAAV,EAAA,uBAAAA,EAAA,CAAAc,IAAA,CAAAhB,EAAA,EAAGF,KAAK,CAAC;MAC1B,IAAIZ,KAAI,CAACM,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;QAC1BL,KAAI,CAAC+B,QAAQ,CAAC,UAAA5B,KAAK;UAAI,OAAC;YACpBC,SAAS,EAAE,MAAM;YACjBC,KAAK,EAAA2B,aAAA,EAAGpB,KAAK,GAAKT,KAAK,CAACE,KAAK;WAChC;QAHsB,CAGrB,CAAC;;IAEX,CAAC;;EACL;EAxGWR,UAAA,CAAAoC,SAAA,CAAAC,kBAAkB,GAAzB,UAA0BC,SAA0B,EAAEC,SAA0B;IAC5EtC,MAAA,CAAAmC,SAAA,CAAMC,kBAAkB,CAAAJ,IAAA,OAACK,SAAS,EAAEC,SAAS,CAAC;IAE9C;IACA,IAAI,IAAI,CAAC9B,KAAK,CAACD,KAAK,KAAK8B,SAAS,CAAC9B,KAAK,IAAI8B,SAAS,CAAC9B,KAAK,IAAI,IAAI,EAAE;MACjE,IAAI,CAAC0B,QAAQ,CAAC;QAAE1B,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAM,CAACE,KAAK,EAAE,CAACC,OAAO;MAAE,CAAE,CAAC;;IAGjE;IACA,IAAM6B,WAAW,GAAG,IAAI,CAAC/B,KAAK,CAACD,KAAK,IAAI,IAAI,GAAG,IAAI,CAACC,KAAK,CAACD,KAAK,CAACc,MAAM,GAAG,CAAC;IAC1E,IAAMmB,eAAe,GAAGH,SAAS,CAAC9B,KAAK,IAAI,IAAI,GAAG8B,SAAS,CAAC9B,KAAK,CAACc,MAAM,GAAG,CAAC;IAC5E,IAAIkB,WAAW,KAAKC,eAAe,IAAIH,SAAS,CAAC9B,KAAK,IAAI,IAAI,EAAE;MAC5D,IAAI,CAAC0B,QAAQ,CAAC;QACV3B,SAAS,EAAE+B,SAAS,CAAC9B,KAAK,CAACc,MAAM,GAAG,IAAI,CAACb,KAAK,CAACD,KAAM,CAACc,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG;OAC/E,CAAC;;EAEV,CAAC;EAEMtB,UAAA,CAAAoC,SAAA,CAAAM,MAAM,GAAb;IACI,IAAMC,OAAO,GAAGnD,UAAU,CACtBK,OAAO,CAAC4B,WAAW,EACnB,GAAAmB,MAAA,CAAG/C,OAAO,CAAC4B,WAAW,OAAAmB,MAAA,CAAI,IAAI,CAACtC,KAAK,CAACC,SAAS,CAAE,EAChD,IAAI,CAACE,KAAK,CAACoC,SAAS,CACvB;IACD,OACIpD,KAAA,CAAA+B,aAAA,CAAC7B,eAAe;MAACkD,SAAS,EAAEF,OAAO;MAAEG,SAAS,EAAC;IAAK,GAC/C,IAAI,CAACC,YAAY,EAAE,CACN;EAE1B,CAAC;EAES/C,UAAA,CAAAoC,SAAA,CAAAY,aAAa,GAAvB,UAAwBvC,KAAsB;IAC1C,IACKA,KAAK,CAACG,YAAY,IAAI,IAAI,IAAIH,KAAK,CAACD,KAAK,IAAI,IAAI,IACjDC,KAAK,CAACG,YAAY,IAAI,IAAI,IAAIH,KAAK,CAACD,KAAK,IAAI,IAAK,EACrD;MACEyC,OAAO,CAACC,KAAK,CAACpD,MAAM,CAACqD,qCAAqC,CAAC;;IAE/D,IAAI1C,KAAK,CAACD,KAAK,IAAI,IAAI,IAAIC,KAAK,CAACD,KAAK,CAACc,MAAM,KAAK,CAAC,EAAE;MACjD2B,OAAO,CAACC,KAAK,CAACpD,MAAM,CAACsD,0BAA0B,CAAC;;EAExD,CAAC;EAEOpD,UAAA,CAAAoC,SAAA,CAAAW,YAAY,GAApB;IACY,IAAA9B,EAAA,GAAiC,IAAI,CAACR,KAAK,CAAAS,qBAAf;MAA5BA,qBAAqB,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAC5B,IAAAT,KAAK,GAAK,IAAI,CAACF,KAAK,CAAAE,KAAf;IACb,IAAIA,KAAK,CAACc,MAAM,KAAK,CAAC,EAAE;MACpB,OAAO,IAAI;;IAEf,IAAM+B,cAAc,GAAGnC,qBAAqB,GAAG,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK;IACjE,IAAM8C,UAAU,GAAGD,cAAc,CAACE,GAAG,CAAC,IAAI,CAACzC,WAAW,CAAC,CAACH,OAAO,EAAE;IACjE,OAAO2C,UAAU;EACrB,CAAC;EAoDL,OAAAtD,UAAC;AAAD,CAAC,CAnH+BJ,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}