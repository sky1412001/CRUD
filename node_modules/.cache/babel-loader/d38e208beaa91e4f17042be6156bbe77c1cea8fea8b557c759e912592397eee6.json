{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CLAMP_MIN_MAX } from \"../errors\";\n/** Returns whether bundler-injected variable `NODE_ENV` equals `env`. */\nexport function isNodeEnv(env) {\n  return typeof NODE_ENV !== \"undefined\" && NODE_ENV === env;\n}\n/**\n * Returns the difference in length between two arrays. A `null` argument is\n * considered an empty list. The return value will be positive if `a` is longer\n * than `b`, negative if the opposite is true, and zero if their lengths are\n * equal.\n */\nexport function arrayLengthCompare(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n  if (b === void 0) {\n    b = [];\n  }\n  return a.length - b.length;\n}\n/**\n * Returns true if the two numbers are within the given tolerance of each other.\n * This is useful to correct for floating point precision issues, less useful\n * for integers.\n */\nexport function approxEqual(a, b, tolerance) {\n  if (tolerance === void 0) {\n    tolerance = 0.00001;\n  }\n  return Math.abs(a - b) <= tolerance;\n}\n/**\n * Clamps the given number between min and max values. Returns value if within\n * range, or closest bound.\n */\nexport function clamp(val, min, max) {\n  if (val == null) {\n    return val;\n  }\n  if (max < min) {\n    throw new Error(CLAMP_MIN_MAX);\n  }\n  return Math.min(Math.max(val, min), max);\n}\n/** Returns the number of decimal places in the given number. */\nexport function countDecimalPlaces(num) {\n  if (!isFinite(num)) {\n    return 0;\n  }\n  var e = 1;\n  var p = 0;\n  while (Math.round(num * e) / e !== num) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nvar uniqueCountForNamespace = new Map();\n/** Generate a unique ID within a given namespace, using a simple counter-based implementation to avoid collisions. */\nexport function uniqueId(namespace) {\n  var _a;\n  var curCount = (_a = uniqueCountForNamespace.get(namespace)) !== null && _a !== void 0 ? _a : 0;\n  uniqueCountForNamespace.set(namespace, curCount + 1);\n  return \"\".concat(namespace, \"-\").concat(curCount);\n}","map":{"version":3,"names":["CLAMP_MIN_MAX","isNodeEnv","env","NODE_ENV","arrayLengthCompare","a","b","length","approxEqual","tolerance","Math","abs","clamp","val","min","max","Error","countDecimalPlaces","num","isFinite","e","p","round","uniqueCountForNamespace","Map","uniqueId","namespace","curCount","_a","get","set","concat"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/common/utils/jsUtils.ts"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CLAMP_MIN_MAX } from \"../errors\";\n\n// injected by webpack.DefinePlugin\n// only accessible within this file, so use `Utils.isNodeEnv(env)` from the outside.\ndeclare let NODE_ENV: string;\n\n/** Returns whether bundler-injected variable `NODE_ENV` equals `env`. */\nexport function isNodeEnv(env: string) {\n    return typeof NODE_ENV !== \"undefined\" && NODE_ENV === env;\n}\n\n/**\n * Returns the difference in length between two arrays. A `null` argument is\n * considered an empty list. The return value will be positive if `a` is longer\n * than `b`, negative if the opposite is true, and zero if their lengths are\n * equal.\n */\nexport function arrayLengthCompare(a: any[] = [], b: any[] = []) {\n    return a.length - b.length;\n}\n\n/**\n * Returns true if the two numbers are within the given tolerance of each other.\n * This is useful to correct for floating point precision issues, less useful\n * for integers.\n */\nexport function approxEqual(a: number, b: number, tolerance = 0.00001) {\n    return Math.abs(a - b) <= tolerance;\n}\n\n/**\n * Clamps the given number between min and max values. Returns value if within\n * range, or closest bound.\n */\nexport function clamp(val: number, min: number, max: number) {\n    if (val == null) {\n        return val;\n    }\n    if (max < min) {\n        throw new Error(CLAMP_MIN_MAX);\n    }\n    return Math.min(Math.max(val, min), max);\n}\n\n/** Returns the number of decimal places in the given number. */\nexport function countDecimalPlaces(num: number) {\n    if (!isFinite(num)) {\n        return 0;\n    }\n    let e = 1;\n    let p = 0;\n    while (Math.round(num * e) / e !== num) {\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n\nconst uniqueCountForNamespace = new Map<string, number>();\n/** Generate a unique ID within a given namespace, using a simple counter-based implementation to avoid collisions. */\nexport function uniqueId(namespace: string) {\n    const curCount = uniqueCountForNamespace.get(namespace) ?? 0;\n    uniqueCountForNamespace.set(namespace, curCount + 1);\n    return `${namespace}-${curCount}`;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,aAAa,QAAQ,WAAW;AAMzC;AACA,OAAM,SAAUC,SAASA,CAACC,GAAW;EACjC,OAAO,OAAOC,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAKD,GAAG;AAC9D;AAEA;;;;;;AAMA,OAAM,SAAUE,kBAAkBA,CAACC,CAAa,EAAEC,CAAa;EAA5B,IAAAD,CAAA;IAAAA,CAAA,KAAa;EAAA;EAAE,IAAAC,CAAA;IAAAA,CAAA,KAAa;EAAA;EAC3D,OAAOD,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM;AAC9B;AAEA;;;;;AAKA,OAAM,SAAUC,WAAWA,CAACH,CAAS,EAAEC,CAAS,EAAEG,SAAmB;EAAnB,IAAAA,SAAA;IAAAA,SAAA,UAAmB;EAAA;EACjE,OAAOC,IAAI,CAACC,GAAG,CAACN,CAAC,GAAGC,CAAC,CAAC,IAAIG,SAAS;AACvC;AAEA;;;;AAIA,OAAM,SAAUG,KAAKA,CAACC,GAAW,EAAEC,GAAW,EAAEC,GAAW;EACvD,IAAIF,GAAG,IAAI,IAAI,EAAE;IACb,OAAOA,GAAG;;EAEd,IAAIE,GAAG,GAAGD,GAAG,EAAE;IACX,MAAM,IAAIE,KAAK,CAAChB,aAAa,CAAC;;EAElC,OAAOU,IAAI,CAACI,GAAG,CAACJ,IAAI,CAACK,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC;AAC5C;AAEA;AACA,OAAM,SAAUE,kBAAkBA,CAACC,GAAW;EAC1C,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAC,EAAE;IAChB,OAAO,CAAC;;EAEZ,IAAIE,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOX,IAAI,CAACY,KAAK,CAACJ,GAAG,GAAGE,CAAC,CAAC,GAAGA,CAAC,KAAKF,GAAG,EAAE;IACpCE,CAAC,IAAI,EAAE;IACPC,CAAC,EAAE;;EAEP,OAAOA,CAAC;AACZ;AAEA,IAAME,uBAAuB,GAAG,IAAIC,GAAG,EAAkB;AACzD;AACA,OAAM,SAAUC,QAAQA,CAACC,SAAiB;;EACtC,IAAMC,QAAQ,GAAG,CAAAC,EAAA,GAAAL,uBAAuB,CAACM,GAAG,CAACH,SAAS,CAAC,cAAAE,EAAA,cAAAA,EAAA,GAAI,CAAC;EAC5DL,uBAAuB,CAACO,GAAG,CAACJ,SAAS,EAAEC,QAAQ,GAAG,CAAC,CAAC;EACpD,OAAO,GAAAI,MAAA,CAAGL,SAAS,OAAAK,MAAA,CAAIJ,QAAQ,CAAE;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}