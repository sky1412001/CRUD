{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nexport var DISPLAYNAME_PREFIX = \"Blueprint5\";\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\nvar INVALID_PROPS = [\"active\", \"alignText\", \"asyncControl\", \"containerRef\", \"current\", \"elementRef\", \"fill\", \"icon\", \"iconSize\", \"inputClassName\", \"inputRef\", \"intent\", \"inline\", \"large\", \"loading\", \"leftElement\", \"leftIcon\", \"minimal\", \"onRemove\", \"outlined\", \"panel\", \"panelClassName\", \"popoverProps\", \"rightElement\", \"rightIcon\", \"round\", \"size\", \"small\", \"tagName\", \"text\"];\n/**\n * Typically applied to HTMLElements to filter out disallowed props. When applied to a Component,\n * can filter props from being passed down to the children. Can also filter by a combined list of\n * supplied prop keys and the denylist (only appropriate for HTMLElements).\n *\n * @param props The original props object to filter down.\n * @param {string[]} invalidProps If supplied, overwrites the default denylist.\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and denylist together.\n */\nexport function removeNonHTMLProps(props, invalidProps, shouldMerge) {\n  if (invalidProps === void 0) {\n    invalidProps = INVALID_PROPS;\n  }\n  if (shouldMerge === void 0) {\n    shouldMerge = false;\n  }\n  if (shouldMerge) {\n    invalidProps = invalidProps.concat(INVALID_PROPS);\n  }\n  return invalidProps.reduce(function (prev, curr) {\n    // Props with hyphens (e.g. data-*) are always considered html props\n    if (curr.indexOf(\"-\") !== -1) {\n      return prev;\n    }\n    if (prev.hasOwnProperty(curr)) {\n      delete prev[curr];\n    }\n    return prev;\n  }, __assign({}, props));\n}","map":{"version":3,"names":["DISPLAYNAME_PREFIX","INVALID_PROPS","removeNonHTMLProps","props","invalidProps","shouldMerge","concat","reduce","prev","curr","indexOf","hasOwnProperty","__assign"],"sources":["/home/meander/Desktop/Akash/Workit/my-app/node_modules/@blueprintjs/core/src/common/props.ts"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport type { IconName } from \"@blueprintjs/icons\";\n\nimport { Intent } from \"./intent\";\n\nexport const DISPLAYNAME_PREFIX = \"Blueprint5\";\n\n/**\n * Alias for all valid HTML props for `<div>` element.\n * Does not include React's `ref` or `key`.\n */\nexport type HTMLDivProps = React.HTMLAttributes<HTMLDivElement>;\n\n/**\n * Alias for all valid HTML props for `<input>` element.\n * Does not include React's `ref` or `key`.\n */\nexport type HTMLInputProps = React.InputHTMLAttributes<HTMLInputElement>;\n\n/**\n * Alias for a `JSX.Element` or a value that renders nothing.\n *\n * In React, `boolean`, `null`, and `undefined` do not produce any output.\n */\nexport type MaybeElement = JSX.Element | false | null | undefined;\n\n/**\n * A shared base interface for all Blueprint component props.\n */\nexport interface Props {\n    /** A space-delimited list of class names to pass along to a child element. */\n    className?: string;\n}\n\nexport interface IntentProps {\n    /** Visual intent color to apply to element. */\n    intent?: Intent;\n}\n\n/**\n * Interface for a clickable action, such as a button or menu item.\n * These props can be spready directly to a `<Button>` or `<MenuItem>` element.\n *\n * @template T type of the DOM element rendered by this component\n */\nexport interface ActionProps<T extends HTMLElement = HTMLElement> extends IntentProps, Props {\n    /** Whether this action is non-interactive. */\n    disabled?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render before the text. */\n    icon?: IconName | MaybeElement;\n\n    /** Click event handler. */\n    onClick?: (event: React.MouseEvent<T>) => void;\n\n    /** Focus event handler. */\n    onFocus?: (event: React.FocusEvent<T>) => void;\n\n    /** Action text. Can be any single React renderable. */\n    text?: React.ReactNode;\n}\n\n/** Interface for a link, with support for customizing target window. */\nexport interface LinkProps {\n    /** Link URL. */\n    href?: string;\n\n    /** Link target attribute. Use `\"_blank\"` to open in a new window. */\n    target?: React.HTMLAttributeAnchorTarget;\n}\n\n/**\n * Interface for a controlled input.\n */\nexport interface ControlledProps {\n    /** Initial value of the input, for uncontrolled usage. */\n    defaultValue?: string;\n\n    /** Form value of the input, for controlled usage. */\n    value?: string;\n}\n\nexport interface OptionProps extends Props {\n    /** Whether this option is non-interactive. */\n    disabled?: boolean;\n\n    /** Label text for this option. If omitted, `value` is used as the label. */\n    label?: string;\n\n    /** Value of this option. */\n    value: string | number;\n}\n\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\nconst INVALID_PROPS = [\n    \"active\",\n    \"alignText\",\n    \"asyncControl\", // InputGroupProps\n    \"containerRef\",\n    \"current\",\n    \"elementRef\", // not used anymore in Blueprint v5.x, but kept for backcompat if consumers use this naming pattern\n    \"fill\",\n    \"icon\",\n    \"iconSize\",\n    \"inputClassName\",\n    \"inputRef\",\n    \"intent\",\n    \"inline\",\n    \"large\",\n    \"loading\",\n    \"leftElement\",\n    \"leftIcon\",\n    \"minimal\",\n    \"onRemove\", // TagProps, TagInputProps\n    \"outlined\", // ButtonProps\n    \"panel\", // TabProps\n    \"panelClassName\", // TabProps\n    \"popoverProps\",\n    \"rightElement\",\n    \"rightIcon\",\n    \"round\",\n    \"size\",\n    \"small\",\n    \"tagName\",\n    \"text\",\n];\n\n/**\n * Typically applied to HTMLElements to filter out disallowed props. When applied to a Component,\n * can filter props from being passed down to the children. Can also filter by a combined list of\n * supplied prop keys and the denylist (only appropriate for HTMLElements).\n *\n * @param props The original props object to filter down.\n * @param {string[]} invalidProps If supplied, overwrites the default denylist.\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and denylist together.\n */\nexport function removeNonHTMLProps(\n    props: { [key: string]: any },\n    invalidProps = INVALID_PROPS,\n    shouldMerge = false,\n): { [key: string]: any } {\n    if (shouldMerge) {\n        invalidProps = invalidProps.concat(INVALID_PROPS);\n    }\n\n    return invalidProps.reduce(\n        (prev, curr) => {\n            // Props with hyphens (e.g. data-*) are always considered html props\n            if (curr.indexOf(\"-\") !== -1) {\n                return prev;\n            }\n\n            if (prev.hasOwnProperty(curr)) {\n                delete (prev as any)[curr];\n            }\n            return prev;\n        },\n        { ...props },\n    );\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMA,kBAAkB,GAAG,YAAY;AAwF9C;AACA,IAAMC,aAAa,GAAG,CAClB,QAAQ,EACR,WAAW,EACX,cAAc,EACd,cAAc,EACd,SAAS,EACT,YAAY,EACZ,MAAM,EACN,MAAM,EACN,UAAU,EACV,gBAAgB,EAChB,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,SAAS,EACT,aAAa,EACb,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,EACV,OAAO,EACP,gBAAgB,EAChB,cAAc,EACd,cAAc,EACd,WAAW,EACX,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,MAAM,CACT;AAED;;;;;;;;;AASA,OAAM,SAAUC,kBAAkBA,CAC9BC,KAA6B,EAC7BC,YAA4B,EAC5BC,WAAmB;EADnB,IAAAD,YAAA;IAAAA,YAAA,GAAAH,aAA4B;EAAA;EAC5B,IAAAI,WAAA;IAAAA,WAAA,QAAmB;EAAA;EAEnB,IAAIA,WAAW,EAAE;IACbD,YAAY,GAAGA,YAAY,CAACE,MAAM,CAACL,aAAa,CAAC;;EAGrD,OAAOG,YAAY,CAACG,MAAM,CACtB,UAACC,IAAI,EAAEC,IAAI;IACP;IACA,IAAIA,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1B,OAAOF,IAAI;;IAGf,IAAIA,IAAI,CAACG,cAAc,CAACF,IAAI,CAAC,EAAE;MAC3B,OAAQD,IAAY,CAACC,IAAI,CAAC;;IAE9B,OAAOD,IAAI;EACf,CAAC,EAAAI,QAAA,KACIT,KAAK,EACb;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}